(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{485:function(t,e,a){"use strict";a.r(e);var s=a(42),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"processor-hpp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#processor-hpp"}},[t._v("#")]),t._v(" Processor.hpp"),a("seo")],1),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/oatpp/oatpp-zlib/blob/master/src/oatpp-zlib/Processor.hpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("This File On Github"),a("OutboundLink")],1),a("br"),t._v(" "),a("a",{attrs:{href:"https://github.com/oatpp/oatpp-zlib/issues/new?title=API%20question&body=In%20file:%20oatpp-zlib/Processor.hpp%0A%0A%23%20Question%0A%0A%3Cyour-question-here%3E",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ask A Question"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("code",[t._v("API: latest")]),a("br"),t._v(" "),a("code",[t._v("module: oatpp-zlib")]),a("br"),t._v(" "),a("code",[t._v('#include "oatpp-zlib/Processor.hpp"')])]),t._v(" "),a("h2",{attrs:{id:"deflateencoder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deflateencoder"}},[t._v("#")]),t._v(" DeflateEncoder")]),t._v(" "),a("p",[t._v("Deflate encoder.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" zlib "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DeflateEncoder")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" oatpp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Processor "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Return Type")]),t._v(" "),a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("[none]")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#deflateencoder-deflateencoder"}},[t._v("DeflateEncoder")])]),t._v(" "),a("td",[t._v("Constructor.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("v_io_size")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#deflateencoder-suggestinputstreamreadsize"}},[t._v("suggestInputStreamReadSize")])]),t._v(" "),a("td",[t._v("If the client is using the input stream to read data and push it to the processor,")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("v_int32")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#deflateencoder-iterate"}},[t._v("iterate")])]),t._v(" "),a("td",[t._v("Process data.")])])])]),t._v(" "),a("h3",{attrs:{id:"deflateencoder-deflateencoder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deflateencoder-deflateencoder"}},[t._v("#")]),t._v(" DeflateEncoder::DeflateEncoder")]),t._v(" "),a("p",[t._v("Constructor. "),a("ul",[a("li",[a("strong",[t._v("@param")]),t._v(" bufferSize ")]),a("li",[a("strong",[t._v("@param")]),t._v(" compressionLevel ")]),a("li",[a("strong",[t._v("@param")]),t._v(" useGzip ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DeflateEncoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v_buff_size bufferSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" gzip "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_int32 compressionLevel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Z_DEFAULT_COMPRESSION"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"deflateencoder-suggestinputstreamreadsize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deflateencoder-suggestinputstreamreadsize"}},[t._v("#")]),t._v(" DeflateEncoder::suggestInputStreamReadSize")]),t._v(" "),a("p",[t._v("If the client is using the input stream to read data and push it to the processor, the client MAY ask the processor for a suggested read size. "),a("ul",[a("li",[a("strong",[t._v("@return")]),t._v(" - suggested read size. ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("v_io_size "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("suggestInputStreamReadSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),a("h3",{attrs:{id:"deflateencoder-iterate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deflateencoder-iterate"}},[t._v("#")]),t._v(" DeflateEncoder::iterate")]),t._v(" "),a("p",[t._v("Process data. "),a("ul",[a("li",[a("strong",[t._v("@param")]),t._v(" dataIn - data provided by client to processor. Input data. data::buffer::InlineReadData. Set "),a("code",[t._v("dataIn")]),t._v(" buffer pointer to "),a("code",[t._v("nullptr")]),t._v(" to designate the end of input. ")]),a("li",[a("strong",[t._v("@param")]),t._v(" dataOut - data provided to client by processor. Output data. data::buffer::InlineReadData. ")]),a("li",[a("strong",[t._v("@return")]),t._v(" - "),a("a",{attrs:{href:"#processor-error"}},[t._v("Processor::Error")]),t._v(". ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("v_int32 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("InlineReadData"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" dataIn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("InlineReadData"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" dataOut"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),a("h2",{attrs:{id:"deflatedecoder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deflatedecoder"}},[t._v("#")]),t._v(" DeflateDecoder")]),t._v(" "),a("p",[t._v("Deflate decoder.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" zlib "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DeflateDecoder")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" oatpp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Processor "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"methods-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods-2"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Return Type")]),t._v(" "),a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("[none]")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#deflatedecoder-deflatedecoder"}},[t._v("DeflateDecoder")])]),t._v(" "),a("td",[t._v("Constructor.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("v_io_size")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#deflatedecoder-suggestinputstreamreadsize"}},[t._v("suggestInputStreamReadSize")])]),t._v(" "),a("td",[t._v("If the client is using the input stream to read data and push it to the processor,")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("v_int32")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#deflatedecoder-iterate"}},[t._v("iterate")])]),t._v(" "),a("td",[t._v("Process data.")])])])]),t._v(" "),a("h3",{attrs:{id:"deflatedecoder-deflatedecoder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deflatedecoder-deflatedecoder"}},[t._v("#")]),t._v(" DeflateDecoder::DeflateDecoder")]),t._v(" "),a("p",[t._v("Constructor. "),a("ul",[a("li",[a("strong",[t._v("@param")]),t._v(" bufferSize ")]),a("li",[a("strong",[t._v("@param")]),t._v(" gzip ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DeflateDecoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v_buff_size bufferSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" gzip "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"deflatedecoder-suggestinputstreamreadsize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deflatedecoder-suggestinputstreamreadsize"}},[t._v("#")]),t._v(" DeflateDecoder::suggestInputStreamReadSize")]),t._v(" "),a("p",[t._v("If the client is using the input stream to read data and push it to the processor, the client MAY ask the processor for a suggested read size. "),a("ul",[a("li",[a("strong",[t._v("@return")]),t._v(" - suggested read size. ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("v_io_size "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("suggestInputStreamReadSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),a("h3",{attrs:{id:"deflatedecoder-iterate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deflatedecoder-iterate"}},[t._v("#")]),t._v(" DeflateDecoder::iterate")]),t._v(" "),a("p",[t._v("Process data. "),a("ul",[a("li",[a("strong",[t._v("@param")]),t._v(" dataIn - data provided by client to processor. Input data. data::buffer::InlineReadData. Set "),a("code",[t._v("dataIn")]),t._v(" buffer pointer to "),a("code",[t._v("nullptr")]),t._v(" to designate the end of input. ")]),a("li",[a("strong",[t._v("@param")]),t._v(" dataOut - data provided to client by processor. Output data. data::buffer::InlineReadData. ")]),a("li",[a("strong",[t._v("@return")]),t._v(" - "),a("a",{attrs:{href:"#processor-error"}},[t._v("Processor::Error")]),t._v(". ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("v_int32 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("InlineReadData"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" dataIn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("InlineReadData"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" dataOut"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);