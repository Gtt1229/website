(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{402:function(t,e,r){"use strict";r.r(e);var a=r(42),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"connectionprovider-hpp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider-hpp"}},[t._v("#")]),t._v(" ConnectionProvider.hpp"),r("seo")],1),t._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/oatpp/oatpp-libressl/blob/master/src/oatpp-libressl/server/ConnectionProvider.hpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("This File On Github"),r("OutboundLink")],1),r("br"),t._v(" "),r("a",{attrs:{href:"https://github.com/oatpp/oatpp-libressl/issues/new?title=API%20question&body=In%20file:%20oatpp-libressl/server/ConnectionProvider.hpp%0A%0A%23%20Question%0A%0A%3Cyour-question-here%3E",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ask A Question"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("code",[t._v("API: latest")]),r("br"),t._v(" "),r("code",[t._v("module: oatpp-libressl")]),r("br"),t._v(" "),r("code",[t._v('#include "oatpp-libressl/server/ConnectionProvider.hpp"')])]),t._v(" "),r("h2",{attrs:{id:"connectionprovider"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider"}},[t._v("#")]),t._v(" ConnectionProvider")]),t._v(" "),r("p",[t._v("Libressl server connection provider. Extends "),r("RouterLink",{attrs:{to:"/api/latest/oatpp/core/base/Countable/#countable"}},[t._v("oatpp::base::Countable")]),t._v(", "),r("RouterLink",{attrs:{to:"/api/latest/oatpp/network/ConnectionProvider/#serverconnectionprovider"}},[t._v("oatpp::network::ServerConnectionProvider")]),t._v(".")],1),t._v(" "),r("div",{staticClass:"language-cpp extra-class"},[r("pre",{pre:!0,attrs:{class:"language-cpp"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" libressl "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" server "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConnectionProvider")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" oatpp"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("network"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ServerConnectionProvider "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("h3",{attrs:{id:"methods"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("Return Type")]),t._v(" "),r("th",[t._v("Name")]),t._v(" "),r("th",[t._v("Summary")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[r("code",[t._v("[none]")])]),t._v(" "),r("td",[r("a",{attrs:{href:"#connectionprovider-connectionprovider"}},[t._v("ConnectionProvider")])]),t._v(" "),r("td",[t._v("Constructor.")])]),t._v(" "),r("tr",[r("td",[r("code",[t._v("std::shared_ptr<ConnectionProvider>")])]),t._v(" "),r("td",[r("a",{attrs:{href:"#connectionprovider-createshared"}},[t._v("createShared")])]),t._v(" "),r("td",[t._v("Multiple implementations: "),r("br"),r("ol",[r("li",[t._v("Create shared ConnectionProvider. ")]),r("li",[t._v("Create shared ConnectionProvider. ")])])])]),t._v(" "),r("tr",[r("td",[r("code",[t._v("[none]")])]),t._v(" "),r("td",[r("a",{attrs:{href:"#connectionprovider-~connectionprovider"}},[t._v("~ConnectionProvider")])]),t._v(" "),r("td",[t._v("Virtual destructor.")])]),t._v(" "),r("tr",[r("td",[r("code",[t._v("void")])]),t._v(" "),r("td",[r("a",{attrs:{href:"#connectionprovider-stop"}},[t._v("stop")])]),t._v(" "),r("td",[t._v("Close all handles.")])]),t._v(" "),r("tr",[r("td",[r("code",[t._v("provider::ResourceHandle<data::stream::IOStream>")])]),t._v(" "),r("td",[r("a",{attrs:{href:"#connectionprovider-get"}},[t._v("get")])]),t._v(" "),r("td",[t._v("Get incoming connection.")])]),t._v(" "),r("tr",[r("td",[r("code",[t._v("oatpp::async::CoroutineStarterForResult<const provider::ResourceHandle<data::stream::IOStream>&>")])]),t._v(" "),r("td",[r("a",{attrs:{href:"#connectionprovider-getasync"}},[t._v("getAsync")])]),t._v(" "),r("td",[t._v("No need to implement this."),r("br")])])])]),t._v(" "),r("h3",{attrs:{id:"connectionprovider-connectionprovider"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider-connectionprovider"}},[t._v("#")]),t._v(" ConnectionProvider::ConnectionProvider")]),t._v(" "),r("p",[t._v("Constructor. "),r("ul",[r("li",[r("strong",[t._v("@param")]),t._v(" config - "),r("RouterLink",{attrs:{to:"/api/latest/oatpp-libressl/Config/#config"}},[t._v("oatpp::libressl::Config")]),t._v(". ")],1),r("li",[r("strong",[t._v("@param")]),t._v(" streamProvider - provider of underlying transport stream. "),r("RouterLink",{attrs:{to:"/api/latest/oatpp/network/ConnectionProvider/#serverconnectionprovider"}},[t._v("oatpp::network::ServerConnectionProvider")]),t._v(". ")],1)])]),t._v(" "),r("div",{staticClass:"language-cpp extra-class"},[r("pre",{pre:!0,attrs:{class:"language-cpp"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConnectionProvider")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Config"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" config"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("oatpp"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("network"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ServerConnectionProvider"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" streamProvider"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),r("h3",{attrs:{id:"connectionprovider-createshared"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider-createshared"}},[t._v("#")]),t._v(" ConnectionProvider::createShared")]),t._v(" "),r("ol",[r("li",[t._v("Create shared ConnectionProvider. "),r("ul",[r("li",[r("strong",[t._v("@param")]),t._v(" config - "),r("RouterLink",{attrs:{to:"/api/latest/oatpp-libressl/Config/#config"}},[t._v("oatpp::libressl::Config")]),t._v(". ")],1),r("li",[r("strong",[t._v("@param")]),t._v(" streamProvider - provider of underlying transport stream. "),r("RouterLink",{attrs:{to:"/api/latest/oatpp/network/ConnectionProvider/#serverconnectionprovider"}},[t._v("oatpp::network::ServerConnectionProvider")]),t._v(". ")],1),r("li",[r("strong",[t._v("@return")]),t._v(" - "),r("code",[t._v("std::shared_ptr")]),t._v(" to ConnectionProvider. ")])]),r("div",{staticClass:"language-cpp extra-class"},[r("pre",{pre:!0,attrs:{class:"language-cpp"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" std"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ConnectionProvider"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShared")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Config"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" config"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                                        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("oatpp"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("network"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ServerConnectionProvider"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" streamProvider"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),r("li",[t._v("Create shared ConnectionProvider. "),r("ul",[r("li",[r("strong",[t._v("@param")]),t._v(" config - "),r("RouterLink",{attrs:{to:"/api/latest/oatpp-libressl/Config/#config"}},[t._v("oatpp::libressl::Config")]),t._v(". ")],1),r("li",[r("strong",[t._v("@param")]),t._v(" address - "),r("RouterLink",{attrs:{to:"/api/latest/oatpp/network/Address/#address"}},[t._v("oatpp::network::Address")]),t._v(". ")],1),r("li",[r("strong",[t._v("@param")]),t._v(" useExtendedConnections - set "),r("code",[t._v("true")]),t._v(" to use "),r("a",{attrs:{href:"#connectionprovider-extendedconnection"}},[t._v("ConnectionProvider::ExtendedConnection")]),t._v(". "),r("code",[t._v("false")]),t._v(" to use "),r("RouterLink",{attrs:{to:"/api/latest/oatpp/network/tcp/Connection/#connection"}},[t._v("oatpp::network::tcp::Connection")]),t._v(". ")],1),r("li",[r("strong",[t._v("@return")]),t._v(" - "),r("code",[t._v("std::shared_ptr")]),t._v(" to ConnectionProvider. ")])]),r("div",{staticClass:"language-cpp extra-class"},[r("pre",{pre:!0,attrs:{class:"language-cpp"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" std"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ConnectionProvider"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShared")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Config"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" config"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                                        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" network"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Address"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" address"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                                        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" useExtendedConnections "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),r("h3",{attrs:{id:"connectionprovider-connectionprovider-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider-connectionprovider-2"}},[t._v("#")]),t._v(" ConnectionProvider::~ConnectionProvider")]),t._v(" "),r("p",[t._v("Virtual destructor.")]),t._v(" "),r("div",{staticClass:"language-cpp extra-class"},[r("pre",{pre:!0,attrs:{class:"language-cpp"}},[r("code",[r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConnectionProvider")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),r("h3",{attrs:{id:"connectionprovider-stop"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider-stop"}},[t._v("#")]),t._v(" ConnectionProvider::stop")]),t._v(" "),r("p",[t._v("Close all handles.")]),t._v(" "),r("div",{staticClass:"language-cpp extra-class"},[r("pre",{pre:!0,attrs:{class:"language-cpp"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("stop")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),r("h3",{attrs:{id:"connectionprovider-get"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider-get"}},[t._v("#")]),t._v(" ConnectionProvider::get")]),t._v(" "),r("p",[t._v("Get incoming connection. "),r("ul",[r("li",[r("strong",[t._v("@return")]),t._v(" "),r("RouterLink",{attrs:{to:"/api/latest/oatpp/core/data/stream/Stream/#iostream"}},[t._v("oatpp::data::stream::IOStream")]),t._v(". ")],1)])]),t._v(" "),r("div",{staticClass:"language-cpp extra-class"},[r("pre",{pre:!0,attrs:{class:"language-cpp"}},[r("code",[t._v("provider"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ResourceHandle"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("data"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stream"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IOStream"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),r("h3",{attrs:{id:"connectionprovider-getasync"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider-getasync"}},[t._v("#")]),t._v(" ConnectionProvider::getAsync")]),t._v(" "),r("p",[t._v("No need to implement this."),r("br"),t._v(" For Asynchronous IO in oatpp it is considered to be a good practice to accept connections in a seperate thread with the blocking accept() and then process connections in Asynchronous manner with non-blocking read/write. "),r("br"),t._v(" "),r("em",[t._v("It may be implemented later")])]),t._v(" "),r("div",{staticClass:"language-cpp extra-class"},[r("pre",{pre:!0,attrs:{class:"language-cpp"}},[r("code",[t._v("oatpp"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("async"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("CoroutineStarterForResult"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" provider"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ResourceHandle"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("data"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stream"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IOStream"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAsync")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);