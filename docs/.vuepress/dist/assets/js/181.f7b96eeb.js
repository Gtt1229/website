(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{553:function(t,a,e){"use strict";e.r(a);var s=e(42),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"fifostream-hpp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifostream-hpp"}},[t._v("#")]),t._v(" FIFOStream.hpp"),e("seo")],1),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/oatpp/oatpp/blob/master/src/oatpp/core/data/stream/FIFOStream.hpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("This File On Github"),e("OutboundLink")],1),e("br"),t._v(" "),e("a",{attrs:{href:"https://github.com/oatpp/oatpp/issues/new?title=API%20question&body=In%20file:%20oatpp/core/data/stream/FIFOStream.hpp%0A%0A%23%20Question%0A%0A%3Cyour-question-here%3E",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ask A Question"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("code",[t._v("API: latest")]),e("br"),t._v(" "),e("code",[t._v("module: oatpp")]),e("br"),t._v(" "),e("code",[t._v('#include "oatpp/core/data/stream/FIFOStream.hpp"')])]),t._v(" "),e("h2",{attrs:{id:"fifoinputstream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream"}},[t._v("#")]),t._v(" FIFOInputStream")]),t._v(" "),e("p",[t._v("FIFOInputStream")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" data "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" stream "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FIFOInputStream")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" BufferedInputStream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" WriteCallback "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"methods"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Return Type")]),t._v(" "),e("th",[t._v("Name")]),t._v(" "),e("th",[t._v("Summary")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("[none]")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-fifoinputstream"}},[t._v("FIFOInputStream")])]),t._v(" "),e("td",[t._v("Constructor.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("void")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-reset"}},[t._v("reset")])]),t._v(" "),e("td",[t._v("Discards all data in the buffer and resets it to an empty state")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("v_io_size")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-read"}},[t._v("read")])]),t._v(" "),e("td",[t._v("Read data from stream. "),e("br")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("void")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-setinputstreamiomode"}},[t._v("setInputStreamIOMode")])]),t._v(" "),e("td",[t._v("Set stream I/O mode.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IOMode")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-getinputstreamiomode"}},[t._v("getInputStreamIOMode")])]),t._v(" "),e("td",[t._v("Get stream I/O mode.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("Context&")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-getinputstreamcontext"}},[t._v("getInputStreamContext")])]),t._v(" "),e("td",[t._v("Get stream context.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("std::shared_ptr<std::string>")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-getdatamemoryhandle"}},[t._v("getDataMemoryHandle")])]),t._v(" "),e("td",[t._v("Get data memory handle.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("v_io_size")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-write"}},[t._v("write")])]),t._v(" "),e("td",[t._v("Write operation callback.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("v_io_size")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-peek"}},[t._v("peek")])]),t._v(" "),e("td",[t._v("Peek up to count of bytes int he buffer")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("v_io_size")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-availabletoread"}},[t._v("availableToRead")])]),t._v(" "),e("td",[t._v("Amount of bytes currently available to read from buffer.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("v_io_size")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-commitreadoffset"}},[t._v("commitReadOffset")])]),t._v(" "),e("td",[t._v("Commit read offset")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("void")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-reservebytesupfront"}},[t._v("reserveBytesUpfront")])]),t._v(" "),e("td",[t._v("Reserve bytes for future writes. Check oatpp::data::stream::FIFOStream::availableToWrite for the capacity.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("v_io_size")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-readandwritetostream"}},[t._v("readAndWriteToStream")])]),t._v(" "),e("td",[t._v("call read and then write bytes read to output stream")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("v_io_size")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-readfromstreamandwrite"}},[t._v("readFromStreamAndWrite")])]),t._v(" "),e("td",[t._v("call stream.read() and then write bytes read to buffer")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("v_io_size")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-flushtostream"}},[t._v("flushToStream")])]),t._v(" "),e("td",[t._v("flush all availableToRead bytes to stream")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("async::CoroutineStarter")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-flushtostreamasync"}},[t._v("flushToStreamAsync")])]),t._v(" "),e("td",[t._v("flush all availableToRead bytes to stream in asynchronous manner")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("v_io_size")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#fifoinputstream-availabletowrite"}},[t._v("availableToWrite")])]),t._v(" "),e("td",[t._v("Amount of buffer space currently available for data writes.")])])])]),t._v(" "),e("h3",{attrs:{id:"fifoinputstream-fifoinputstream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-fifoinputstream"}},[t._v("#")]),t._v(" FIFOInputStream::FIFOInputStream")]),t._v(" "),e("p",[t._v("Constructor. "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" data - buffer. ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("FIFOInputStream")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v_buff_size initialSize "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4096")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"fifoinputstream-reset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-reset"}},[t._v("#")]),t._v(" FIFOInputStream::reset")]),t._v(" "),e("p",[t._v("Discards all data in the buffer and resets it to an empty state")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reset")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"fifoinputstream-read"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-read"}},[t._v("#")]),t._v(" FIFOInputStream::read")]),t._v(" "),e("p",[t._v("Read data from stream. "),e("br"),t._v(" It is a legal case if return result < count. Caller should handle this! "),e("em",[t._v("Calls to this method are always NON-BLOCKING")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" data - buffer to read data to. ")]),e("li",[e("strong",[t._v("@param")]),t._v(" count - size of the buffer. ")]),e("li",[e("strong",[t._v("@param")]),t._v(" action - async specific action. If action is NOT "),e("RouterLink",{attrs:{to:"/api/latest/oatpp/core/async/Coroutine/#action-type-none"}},[t._v("oatpp::async::Action::TYPE_NONE")]),t._v(", then caller MUST return this action on coroutine iteration. ")],1),e("li",[e("strong",[t._v("@return")]),t._v(" - actual number of bytes read. 0 - designates end of the buffer. ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("v_io_size "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" async"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Action"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" action"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),e("h3",{attrs:{id:"fifoinputstream-setinputstreamiomode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-setinputstreamiomode"}},[t._v("#")]),t._v(" FIFOInputStream::setInputStreamIOMode")]),t._v(" "),e("p",[t._v("Set stream I/O mode. "),e("ul",[e("li",[e("strong",[t._v("@throws")])])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInputStreamIOMode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IOMode ioMode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),e("h3",{attrs:{id:"fifoinputstream-getinputstreamiomode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-getinputstreamiomode"}},[t._v("#")]),t._v(" FIFOInputStream::getInputStreamIOMode")]),t._v(" "),e("p",[t._v("Get stream I/O mode. "),e("ul",[e("li",[e("strong",[t._v("@return")])])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("IOMode "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInputStreamIOMode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),e("h3",{attrs:{id:"fifoinputstream-getinputstreamcontext"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-getinputstreamcontext"}},[t._v("#")]),t._v(" FIFOInputStream::getInputStreamContext")]),t._v(" "),e("p",[t._v("Get stream context. "),e("ul",[e("li",[e("strong",[t._v("@return")])])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("Context"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInputStreamContext")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),e("h3",{attrs:{id:"fifoinputstream-getdatamemoryhandle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-getdatamemoryhandle"}},[t._v("#")]),t._v(" FIFOInputStream::getDataMemoryHandle")]),t._v(" "),e("p",[t._v("Get data memory handle. "),e("ul",[e("li",[e("strong",[t._v("@return")]),t._v(" - data memory handle. ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("std"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("std"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDataMemoryHandle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"fifoinputstream-write"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-write"}},[t._v("#")]),t._v(" FIFOInputStream::write")]),t._v(" "),e("p",[t._v("Write operation callback. "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" data - pointer to data. ")]),e("li",[e("strong",[t._v("@param")]),t._v(" count - size of the data in bytes. ")]),e("li",[e("strong",[t._v("@param")]),t._v(" action - async specific action. If action is NOT "),e("RouterLink",{attrs:{to:"/api/latest/oatpp/core/async/Coroutine/#action-type-none"}},[t._v("oatpp::async::Action::TYPE_NONE")]),t._v(", then caller MUST return this action on coroutine iteration. ")],1),e("li",[e("strong",[t._v("@return")]),t._v(" - actual number of bytes written. 0 - to indicate end-of-file. ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("v_io_size "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" async"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Action "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("action"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),e("h3",{attrs:{id:"fifoinputstream-peek"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-peek"}},[t._v("#")]),t._v(" FIFOInputStream::peek")]),t._v(" "),e("p",[t._v("Peek up to count of bytes int he buffer "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" data ")]),e("li",[e("strong",[t._v("@param")]),t._v(" count ")]),e("li",[e("strong",[t._v("@return")]),t._v(" [1..count], IOErrors. ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("v_io_size "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("peek")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" async"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Action"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" action"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),e("h3",{attrs:{id:"fifoinputstream-availabletoread"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-availabletoread"}},[t._v("#")]),t._v(" FIFOInputStream::availableToRead")]),t._v(" "),e("p",[t._v("Amount of bytes currently available to read from buffer. "),e("ul",[e("li",[e("strong",[t._v("@return")]),t._v(" "),e("RouterLink",{attrs:{to:"/api/latest/oatpp/core/IODefinitions/#v-io-size"}},[t._v("oatpp::v_io_size")]),t._v(". ")],1)])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("v_io_size "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("availableToRead")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" override\n")])])]),e("h3",{attrs:{id:"fifoinputstream-commitreadoffset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-commitreadoffset"}},[t._v("#")]),t._v(" FIFOInputStream::commitReadOffset")]),t._v(" "),e("p",[t._v("Commit read offset "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" count ")]),e("li",[e("strong",[t._v("@return")]),t._v(" [1..count], IOErrors. ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("v_io_size "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitReadOffset")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v_buff_size count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),e("h3",{attrs:{id:"fifoinputstream-reservebytesupfront"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-reservebytesupfront"}},[t._v("#")]),t._v(" FIFOInputStream::reserveBytesUpfront")]),t._v(" "),e("p",[t._v("Reserve bytes for future writes. Check oatpp::data::stream::FIFOStream::availableToWrite for the capacity.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reserveBytesUpfront")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v_buff_size count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"fifoinputstream-readandwritetostream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-readandwritetostream"}},[t._v("#")]),t._v(" FIFOInputStream::readAndWriteToStream")]),t._v(" "),e("p",[t._v("call read and then write bytes read to output stream "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" stream ")]),e("li",[e("strong",[t._v("@param")]),t._v(" count ")]),e("li",[e("strong",[t._v("@param")]),t._v(" action ")]),e("li",[e("strong",[t._v("@return")]),t._v(" [1..count], IOErrors. ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("v_io_size "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("readAndWriteToStream")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stream"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("OutputStream"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" stream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" async"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Action"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" action"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"fifoinputstream-readfromstreamandwrite"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-readfromstreamandwrite"}},[t._v("#")]),t._v(" FIFOInputStream::readFromStreamAndWrite")]),t._v(" "),e("p",[t._v("call stream.read() and then write bytes read to buffer "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" stream ")]),e("li",[e("strong",[t._v("@param")]),t._v(" count ")]),e("li",[e("strong",[t._v("@param")]),t._v(" action ")]),e("li",[e("strong",[t._v("@return")])])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("v_io_size "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFromStreamAndWrite")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stream"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("InputStream"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" stream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" async"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Action"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" action"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"fifoinputstream-flushtostream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-flushtostream"}},[t._v("#")]),t._v(" FIFOInputStream::flushToStream")]),t._v(" "),e("p",[t._v("flush all availableToRead bytes to stream "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" stream ")]),e("li",[e("strong",[t._v("@return")])])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("v_io_size "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("flushToStream")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stream"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("OutputStream"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" stream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"fifoinputstream-flushtostreamasync"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-flushtostreamasync"}},[t._v("#")]),t._v(" FIFOInputStream::flushToStreamAsync")]),t._v(" "),e("p",[t._v("flush all availableToRead bytes to stream in asynchronous manner "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" stream - data::stream::OutputStream. ")]),e("li",[e("strong",[t._v("@return")]),t._v(" - async::CoroutineStarter. ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("async"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("CoroutineStarter "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("flushToStreamAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stream"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("OutputStream"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" stream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"fifoinputstream-availabletowrite"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fifoinputstream-availabletowrite"}},[t._v("#")]),t._v(" FIFOInputStream::availableToWrite")]),t._v(" "),e("p",[t._v("Amount of buffer space currently available for data writes. "),e("ul",[e("li",[e("strong",[t._v("@return")]),t._v(" "),e("RouterLink",{attrs:{to:"/api/latest/oatpp/core/IODefinitions/#v-io-size"}},[t._v("oatpp::v_io_size")]),t._v(". ")],1)])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("v_io_size "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("availableToWrite")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);