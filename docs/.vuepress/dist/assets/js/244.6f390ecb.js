(window.webpackJsonp=window.webpackJsonp||[]).push([[244],{616:function(a,t,s){"use strict";s.r(t);var e=s(42),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"statefulparser-hpp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser-hpp"}},[a._v("#")]),a._v(" StatefulParser.hpp"),s("seo")],1),a._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/oatpp/oatpp/blob/master/src/oatpp/web/mime/multipart/StatefulParser.hpp",target:"_blank",rel:"noopener noreferrer"}},[a._v("This File On Github"),s("OutboundLink")],1),s("br"),a._v(" "),s("a",{attrs:{href:"https://github.com/oatpp/oatpp/issues/new?title=API%20question&body=In%20file:%20oatpp/web/mime/multipart/StatefulParser.hpp%0A%0A%23%20Question%0A%0A%3Cyour-question-here%3E",target:"_blank",rel:"noopener noreferrer"}},[a._v("Ask A Question"),s("OutboundLink")],1)]),a._v(" "),s("p",[s("code",[a._v("API: latest")]),s("br"),a._v(" "),s("code",[a._v("module: oatpp")]),s("br"),a._v(" "),s("code",[a._v('#include "oatpp/web/mime/multipart/StatefulParser.hpp"')])]),a._v(" "),s("h2",{attrs:{id:"statefulparser"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser"}},[a._v("#")]),a._v(" StatefulParser")]),a._v(" "),s("p",[a._v("Stateful parser of multipart-data stream. Parser designed to work with stream-like data in order to store minimum data in the memory.")]),a._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" oatpp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" web "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" mime "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" multipart "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StatefulParser")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"typedefs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typedefs"}},[a._v("#")]),a._v(" Typedefs")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("Type")]),a._v(" "),s("th",[a._v("Name")]),a._v(" "),s("th",[a._v("Summary")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[s("code",[a._v("oatpp::data::share::LazyStringMultimap<oatpp::data::share::StringKeyLabelCI>")])]),a._v(" "),s("td",[s("a",{attrs:{href:"#statefulparser-headers"}},[a._v("Headers")])]),a._v(" "),s("td",[a._v("Typedef for headers map. Headers map key is case-insensitive. For more info see "),s("RouterLink",{attrs:{to:"/api/latest/oatpp/core/data/share/LazyStringMap/#lazystringmap"}},[a._v("oatpp::data::share::LazyStringMap")]),a._v(".")],1)])])]),a._v(" "),s("h3",{attrs:{id:"methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[a._v("#")]),a._v(" Methods")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("Return Type")]),a._v(" "),s("th",[a._v("Name")]),a._v(" "),s("th",[a._v("Summary")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[s("code",[a._v("[none]")])]),a._v(" "),s("td",[s("a",{attrs:{href:"#statefulparser-statefulparser"}},[a._v("StatefulParser")])]),a._v(" "),s("td",[a._v("Constructor.")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("void")])]),a._v(" "),s("td",[s("a",{attrs:{href:"#statefulparser-parsenext"}},[a._v("parseNext")])]),a._v(" "),s("td",[a._v("Parse next chunk of bytes.")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("bool")])]),a._v(" "),s("td",[s("a",{attrs:{href:"#statefulparser-finished"}},[a._v("finished")])]),a._v(" "),s("td",[a._v("Check if parser done parsing data.")])])])]),a._v(" "),s("h3",{attrs:{id:"statefulparser-headers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser-headers"}},[a._v("#")]),a._v(" StatefulParser::Headers")]),a._v(" "),s("p",[a._v("Typedef for headers map. Headers map key is case-insensitive. For more info see "),s("RouterLink",{attrs:{to:"/api/latest/oatpp/core/data/share/LazyStringMap/#lazystringmap"}},[a._v("oatpp::data::share::LazyStringMap")]),a._v(".")],1),a._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("typedef")]),a._v(" oatpp"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("data"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("share"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("LazyStringMultimap"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("oatpp"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("data"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("share"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("StringKeyLabelCI"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Headers\n")])])]),s("h3",{attrs:{id:"statefulparser-statefulparser"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser-statefulparser"}},[a._v("#")]),a._v(" StatefulParser::StatefulParser")]),a._v(" "),s("p",[a._v("Constructor. "),s("ul",[s("li",[s("strong",[a._v("@param")]),a._v(" boundary - value of multipart boundary. ")]),s("li",[s("strong",[a._v("@param")]),a._v(" listener - "),s("a",{attrs:{href:"#statefulparser-listener"}},[a._v("StatefulParser::Listener")]),a._v(". ")]),s("li",[s("strong",[a._v("@param")]),a._v(" asyncListener - "),s("a",{attrs:{href:"#statefulparser-asynclistener"}},[a._v("StatefulParser::AsyncListener")]),a._v(". ")])])]),a._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("StatefulParser")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" oatpp"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("String"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" boundary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" std"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("Listener"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" listener"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" std"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("AsyncListener"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" asyncListener"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h3",{attrs:{id:"statefulparser-parsenext"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser-parsenext"}},[a._v("#")]),a._v(" StatefulParser::parseNext")]),a._v(" "),s("p",[a._v("Parse next chunk of bytes. "),s("ul",[s("li",[s("strong",[a._v("@param")]),a._v(" inlineData - inline data. ")]),s("li",[s("strong",[a._v("@param")]),a._v(" action - Async Action in case Async Listener was provided in constructor. ")])])]),a._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("parseNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("data"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("buffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("InlineWriteData"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" inlineData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" async"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("Action"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h3",{attrs:{id:"statefulparser-finished"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser-finished"}},[a._v("#")]),a._v(" StatefulParser::finished")]),a._v(" "),s("p",[a._v("Check if parser done parsing data. "),s("ul",[s("li",[s("strong",[a._v("@return")]),a._v(" - "),s("code",[a._v("true")]),a._v(" or "),s("code",[a._v("false")]),a._v(". ")])])]),a._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("bool")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("finished")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h2",{attrs:{id:"statefulparser-listener"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser-listener"}},[a._v("#")]),a._v(" StatefulParser::Listener")]),a._v(" "),s("p",[a._v("Listener for parsed items.")]),a._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" oatpp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" web "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" mime "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" multipart "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StatefulParser")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Listener")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"typedefs-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typedefs-2"}},[a._v("#")]),a._v(" Typedefs")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("Type")]),a._v(" "),s("th",[a._v("Name")]),a._v(" "),s("th",[a._v("Summary")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[s("code",[a._v("oatpp::data::share::LazyStringMultimap<oatpp::data::share::StringKeyLabelCI>")])]),a._v(" "),s("td",[s("a",{attrs:{href:"#statefulparser-listener-headers"}},[a._v("Headers")])]),a._v(" "),s("td",[a._v("Typedef for headers map. Headers map key is case-insensitive. For more info see "),s("RouterLink",{attrs:{to:"/api/latest/oatpp/core/data/share/LazyStringMap/#lazystringmap"}},[a._v("oatpp::data::share::LazyStringMap")]),a._v(".")],1)])])]),a._v(" "),s("h3",{attrs:{id:"methods-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods-2"}},[a._v("#")]),a._v(" Methods")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("Return Type")]),a._v(" "),s("th",[a._v("Name")]),a._v(" "),s("th",[a._v("Summary")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[s("code",[a._v("[none]")])]),a._v(" "),s("td",[s("a",{attrs:{href:"#statefulparser-listener-~listener"}},[a._v("~Listener")])]),a._v(" "),s("td",[a._v("Default virtual Destructor.")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("void")])]),a._v(" "),s("td",[s("a",{attrs:{href:"#statefulparser-listener-onpartheaders"}},[a._v("onPartHeaders")])]),a._v(" "),s("td",[a._v("Called on new part found in the stream.")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("void")])]),a._v(" "),s("td",[s("a",{attrs:{href:"#statefulparser-listener-onpartdata"}},[a._v("onPartData")])]),a._v(" "),s("td",[a._v("Called on each new chunk of bytes parsed from the part body.")])])])]),a._v(" "),s("h3",{attrs:{id:"statefulparser-listener-headers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser-listener-headers"}},[a._v("#")]),a._v(" StatefulParser::Listener::Headers")]),a._v(" "),s("p",[a._v("Typedef for headers map. Headers map key is case-insensitive. For more info see "),s("RouterLink",{attrs:{to:"/api/latest/oatpp/core/data/share/LazyStringMap/#lazystringmap"}},[a._v("oatpp::data::share::LazyStringMap")]),a._v(".")],1),a._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("typedef")]),a._v(" oatpp"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("data"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("share"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("LazyStringMultimap"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("oatpp"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("data"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("share"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("StringKeyLabelCI"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Headers\n")])])]),s("h3",{attrs:{id:"statefulparser-listener-listener"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser-listener-listener"}},[a._v("#")]),a._v(" StatefulParser::Listener::~Listener")]),a._v(" "),s("p",[a._v("Default virtual Destructor.")]),a._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("virtual")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("~")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("Listener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v("\n")])])]),s("h3",{attrs:{id:"statefulparser-listener-onpartheaders"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser-listener-onpartheaders"}},[a._v("#")]),a._v(" StatefulParser::Listener::onPartHeaders")]),a._v(" "),s("p",[a._v("Called on new part found in the stream. Always called before "),s("code",[a._v("onPartData")]),a._v(" events. "),s("ul",[s("li",[s("strong",[a._v("@param")]),a._v(" partHeaders - complete set of part headers. ")])])]),a._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("virtual")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("onPartHeaders")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" Headers"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" partHeaders"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n")])])]),s("h3",{attrs:{id:"statefulparser-listener-onpartdata"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser-listener-onpartdata"}},[a._v("#")]),a._v(" StatefulParser::Listener::onPartData")]),a._v(" "),s("p",[a._v("Called on each new chunk of bytes parsed from the part body. When all data of message is read, readMessage is called again with size == 0 to indicate end of the part. "),s("ul",[s("li",[s("strong",[a._v("@param")]),a._v(" data - pointer to data. ")]),s("li",[s("strong",[a._v("@param")]),a._v(" size - size of the data in bytes. ")])])]),a._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("virtual")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("onPartData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n")])])]),s("h2",{attrs:{id:"statefulparser-asynclistener"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser-asynclistener"}},[a._v("#")]),a._v(" StatefulParser::AsyncListener")]),a._v(" "),s("p",[a._v("Async Listener for parsed items.")]),a._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" oatpp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" web "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" mime "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" multipart "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StatefulParser")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AsyncListener")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"typedefs-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typedefs-3"}},[a._v("#")]),a._v(" Typedefs")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("Type")]),a._v(" "),s("th",[a._v("Name")]),a._v(" "),s("th",[a._v("Summary")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[s("code",[a._v("oatpp::data::share::LazyStringMultimap<oatpp::data::share::StringKeyLabelCI>")])]),a._v(" "),s("td",[s("a",{attrs:{href:"#statefulparser-asynclistener-headers"}},[a._v("Headers")])]),a._v(" "),s("td",[a._v("Typedef for headers map. Headers map key is case-insensitive. For more info see "),s("RouterLink",{attrs:{to:"/api/latest/oatpp/core/data/share/LazyStringMap/#lazystringmap"}},[a._v("oatpp::data::share::LazyStringMap")]),a._v(".")],1)])])]),a._v(" "),s("h3",{attrs:{id:"methods-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods-3"}},[a._v("#")]),a._v(" Methods")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("Return Type")]),a._v(" "),s("th",[a._v("Name")]),a._v(" "),s("th",[a._v("Summary")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[s("code",[a._v("[none]")])]),a._v(" "),s("td",[s("a",{attrs:{href:"#statefulparser-asynclistener-~asynclistener"}},[a._v("~AsyncListener")])]),a._v(" "),s("td",[a._v("Default virtual Destructor.")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("async::CoroutineStarter")])]),a._v(" "),s("td",[s("a",{attrs:{href:"#statefulparser-asynclistener-onpartheadersasync"}},[a._v("onPartHeadersAsync")])]),a._v(" "),s("td",[a._v("Called on new part found in the stream.")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("async::CoroutineStarter")])]),a._v(" "),s("td",[s("a",{attrs:{href:"#statefulparser-asynclistener-onpartdataasync"}},[a._v("onPartDataAsync")])]),a._v(" "),s("td",[a._v("Called on each new chunk of bytes parsed from the part body.")])])])]),a._v(" "),s("h3",{attrs:{id:"statefulparser-asynclistener-headers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser-asynclistener-headers"}},[a._v("#")]),a._v(" StatefulParser::AsyncListener::Headers")]),a._v(" "),s("p",[a._v("Typedef for headers map. Headers map key is case-insensitive. For more info see "),s("RouterLink",{attrs:{to:"/api/latest/oatpp/core/data/share/LazyStringMap/#lazystringmap"}},[a._v("oatpp::data::share::LazyStringMap")]),a._v(".")],1),a._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("typedef")]),a._v(" oatpp"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("data"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("share"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("LazyStringMultimap"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("oatpp"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("data"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("share"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("StringKeyLabelCI"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Headers\n")])])]),s("h3",{attrs:{id:"statefulparser-asynclistener-asynclistener"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser-asynclistener-asynclistener"}},[a._v("#")]),a._v(" StatefulParser::AsyncListener::~AsyncListener")]),a._v(" "),s("p",[a._v("Default virtual Destructor.")]),a._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("virtual")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("~")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("AsyncListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v("\n")])])]),s("h3",{attrs:{id:"statefulparser-asynclistener-onpartheadersasync"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser-asynclistener-onpartheadersasync"}},[a._v("#")]),a._v(" StatefulParser::AsyncListener::onPartHeadersAsync")]),a._v(" "),s("p",[a._v("Called on new part found in the stream. Always called before "),s("code",[a._v("onPartData")]),a._v(" events. "),s("ul",[s("li",[s("strong",[a._v("@param")]),a._v(" partHeaders - complete set of part headers. ")])])]),a._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("virtual")]),a._v(" async"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("CoroutineStarter "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("onPartHeadersAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" Headers"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" partHeaders"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n")])])]),s("h3",{attrs:{id:"statefulparser-asynclistener-onpartdataasync"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statefulparser-asynclistener-onpartdataasync"}},[a._v("#")]),a._v(" StatefulParser::AsyncListener::onPartDataAsync")]),a._v(" "),s("p",[a._v("Called on each new chunk of bytes parsed from the part body. When all data of message is read, readMessage is called again with size == 0 to indicate end of the part. "),s("ul",[s("li",[s("strong",[a._v("@param")]),a._v(" data - pointer to data. ")]),s("li",[s("strong",[a._v("@param")]),a._v(" size - size of the data in bytes. ")])])]),a._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("virtual")]),a._v(" async"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v("CoroutineStarter "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("onPartDataAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);