(window.webpackJsonp=window.webpackJsonp||[]).push([[273],{645:function(t,e,s){"use strict";s.r(e);var r=s(42),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"requestinterceptor-hpp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#requestinterceptor-hpp"}},[t._v("#")]),t._v(" RequestInterceptor.hpp"),s("seo")],1),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/oatpp/oatpp/blob/master/src/oatpp/web/server/interceptor/RequestInterceptor.hpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("This File On Github"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://github.com/oatpp/oatpp/issues/new?title=API%20question&body=In%20file:%20oatpp/web/server/interceptor/RequestInterceptor.hpp%0A%0A%23%20Question%0A%0A%3Cyour-question-here%3E",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ask A Question"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("code",[t._v("API: latest")]),s("br"),t._v(" "),s("code",[t._v("module: oatpp")]),s("br"),t._v(" "),s("code",[t._v('#include "oatpp/web/server/interceptor/RequestInterceptor.hpp"')])]),t._v(" "),s("h2",{attrs:{id:"requestinterceptor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#requestinterceptor"}},[t._v("#")]),t._v(" RequestInterceptor")]),t._v(" "),s("p",[t._v("RequestInterceptor.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" web "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" interceptor "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RequestInterceptor")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"typedefs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typedefs"}},[t._v("#")]),t._v(" Typedefs")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Type")]),t._v(" "),s("th",[t._v("Name")]),t._v(" "),s("th",[t._v("Summary")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("oatpp::web::protocol::http::incoming::Request")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#requestinterceptor-incomingrequest"}},[t._v("IncomingRequest")])]),t._v(" "),s("td",[t._v("Convenience typedef for "),s("RouterLink",{attrs:{to:"/api/latest/oatpp/web/protocol/http/incoming/Request/#request"}},[t._v("oatpp::web::protocol::http::incoming::Request")]),t._v(".")],1)]),t._v(" "),s("tr",[s("td",[s("code",[t._v("oatpp::web::protocol::http::outgoing::Response")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#requestinterceptor-outgoingresponse"}},[t._v("OutgoingResponse")])]),t._v(" "),s("td",[t._v("Convenience typedef for "),s("RouterLink",{attrs:{to:"/api/latest/oatpp/web/protocol/http/outgoing/Response/#response"}},[t._v("oatpp::web::protocol::http::outgoing::Response")]),t._v(".")],1)])])]),t._v(" "),s("h3",{attrs:{id:"methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Return Type")]),t._v(" "),s("th",[t._v("Name")]),t._v(" "),s("th",[t._v("Summary")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("[none]")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#requestinterceptor-~requestinterceptor"}},[t._v("~RequestInterceptor")])]),t._v(" "),s("td",[t._v("Default virtual destructor.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("std::shared_ptr<OutgoingResponse>")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#requestinterceptor-intercept"}},[t._v("intercept")])]),t._v(" "),s("td",[t._v('This method should not do any "heavy" nor I/O operations')])])])]),t._v(" "),s("h3",{attrs:{id:"requestinterceptor-incomingrequest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#requestinterceptor-incomingrequest"}},[t._v("#")]),t._v(" RequestInterceptor::IncomingRequest")]),t._v(" "),s("p",[t._v("Convenience typedef for "),s("RouterLink",{attrs:{to:"/api/latest/oatpp/web/protocol/http/incoming/Request/#request"}},[t._v("oatpp::web::protocol::http::incoming::Request")]),t._v(".")],1),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" oatpp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("web"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("protocol"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("http"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("incoming"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Request IncomingRequest\n")])])]),s("h3",{attrs:{id:"requestinterceptor-outgoingresponse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#requestinterceptor-outgoingresponse"}},[t._v("#")]),t._v(" RequestInterceptor::OutgoingResponse")]),t._v(" "),s("p",[t._v("Convenience typedef for "),s("RouterLink",{attrs:{to:"/api/latest/oatpp/web/protocol/http/outgoing/Response/#response"}},[t._v("oatpp::web::protocol::http::outgoing::Response")]),t._v(".")],1),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" oatpp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("web"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("protocol"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("http"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("outgoing"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Response OutgoingResponse\n")])])]),s("h3",{attrs:{id:"requestinterceptor-requestinterceptor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#requestinterceptor-requestinterceptor"}},[t._v("#")]),t._v(" RequestInterceptor::~RequestInterceptor")]),t._v(" "),s("p",[t._v("Default virtual destructor.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("RequestInterceptor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v("\n")])])]),s("h3",{attrs:{id:"requestinterceptor-intercept"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#requestinterceptor-intercept"}},[t._v("#")]),t._v(" RequestInterceptor::intercept")]),t._v(" "),s("p",[t._v('This method should not do any "heavy" nor I/O operations  as it is used for both "Simple" and "Async" API  NOT FOR I/O operations!!!  - return nullptr to continue.  - return OutgoingResponse to send response immediately  possible usage ex: return 301 - redirect if needed')]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("OutgoingResponse"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intercept")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IncomingRequest"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);