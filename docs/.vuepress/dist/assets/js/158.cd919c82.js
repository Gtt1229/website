(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{530:function(t,a,e){"use strict";e.r(a);var s=e(42),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"processor-hpp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processor-hpp"}},[t._v("#")]),t._v(" Processor.hpp"),e("seo")],1),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/oatpp/oatpp/blob/master/src/oatpp/core/data/buffer/Processor.hpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("This File On Github"),e("OutboundLink")],1),e("br"),t._v(" "),e("a",{attrs:{href:"https://github.com/oatpp/oatpp/issues/new?title=API%20question&body=In%20file:%20oatpp/core/data/buffer/Processor.hpp%0A%0A%23%20Question%0A%0A%3Cyour-question-here%3E",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ask A Question"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("code",[t._v("API: latest")]),e("br"),t._v(" "),e("code",[t._v("module: oatpp")]),e("br"),t._v(" "),e("code",[t._v('#include "oatpp/core/data/buffer/Processor.hpp"')])]),t._v(" "),e("h2",{attrs:{id:"inlinereaddata"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inlinereaddata"}},[t._v("#")]),t._v(" InlineReadData")]),t._v(" "),e("p",[t._v("Convenience structure for stream Async-Inline read operations.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" data "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" buffer "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InlineReadData")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"fields"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fields"}},[t._v("#")]),t._v(" Fields")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Type")]),t._v(" "),e("th",[t._v("Name")]),t._v(" "),e("th",[t._v("Summary")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("void*")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#inlinereaddata-currbufferptr"}},[t._v("currBufferPtr")])]),t._v(" "),e("td",[t._v("Pointer to current position in the buffer.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("v_buff_size")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#inlinereaddata-bytesleft"}},[t._v("bytesLeft")])]),t._v(" "),e("td",[t._v("Bytes left to read to the buffer.")])])])]),t._v(" "),e("h3",{attrs:{id:"methods"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Return Type")]),t._v(" "),e("th",[t._v("Name")]),t._v(" "),e("th",[t._v("Summary")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("[none]")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#inlinereaddata-inlinereaddata"}},[t._v("InlineReadData")])]),t._v(" "),e("td",[t._v("Multiple implementations: "),e("br"),e("ol",[e("li",[t._v("Default constructor. ")]),e("li",[t._v("Constructor. ")])])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("void")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#inlinereaddata-set"}},[t._v("set")])]),t._v(" "),e("td",[t._v("Set "),e("code",[t._v("currBufferPtr")]),t._v(" and "),e("code",[t._v("bytesLeft")]),t._v(" values. "),e("br")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("void")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#inlinereaddata-inc"}},[t._v("inc")])]),t._v(" "),e("td",[t._v("Increase position in the read buffer by "),e("code",[t._v("amount")]),t._v(" bytes. "),e("br")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("void")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#inlinereaddata-seteof"}},[t._v("setEof")])]),t._v(" "),e("td",[t._v("Same as "),e("code",[t._v("inc(bytesLeft).")])])])])]),t._v(" "),e("h3",{attrs:{id:"inlinereaddata-currbufferptr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inlinereaddata-currbufferptr"}},[t._v("#")]),t._v(" InlineReadData::currBufferPtr")]),t._v(" "),e("p",[t._v("Pointer to current position in the buffer.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" currBufferPtr\n")])])]),e("h3",{attrs:{id:"inlinereaddata-bytesleft"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inlinereaddata-bytesleft"}},[t._v("#")]),t._v(" InlineReadData::bytesLeft")]),t._v(" "),e("p",[t._v("Bytes left to read to the buffer.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("v_buff_size bytesLeft\n")])])]),e("h3",{attrs:{id:"inlinereaddata-inlinereaddata"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inlinereaddata-inlinereaddata"}},[t._v("#")]),t._v(" InlineReadData::InlineReadData")]),t._v(" "),e("ol",[e("li",[t._v("Default constructor."),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("InlineReadData")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),e("li",[t._v("Constructor. "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" data ")]),e("li",[e("strong",[t._v("@param")]),t._v(" size ")])]),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("InlineReadData")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),e("h3",{attrs:{id:"inlinereaddata-set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inlinereaddata-set"}},[t._v("#")]),t._v(" InlineReadData::set")]),t._v(" "),e("p",[t._v("Set "),e("code",[t._v("currBufferPtr")]),t._v(" and "),e("code",[t._v("bytesLeft")]),t._v(" values. "),e("br"),t._v(" "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" data - pointer to buffer to store read data. ")]),e("li",[e("strong",[t._v("@param")]),t._v(" size - size in bytes of the buffer. ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"inlinereaddata-inc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inlinereaddata-inc"}},[t._v("#")]),t._v(" InlineReadData::inc")]),t._v(" "),e("p",[t._v("Increase position in the read buffer by "),e("code",[t._v("amount")]),t._v(" bytes. "),e("br"),t._v(" This will increase "),e("code",[t._v("currBufferPtr")]),t._v(" and descrease "),e("code",[t._v("bytesLeft")]),t._v(" values. "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" amount ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("inc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v_buff_size amount"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"inlinereaddata-seteof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inlinereaddata-seteof"}},[t._v("#")]),t._v(" InlineReadData::setEof")]),t._v(" "),e("p",[t._v("Same as "),e("code",[t._v("inc(bytesLeft).")])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setEof")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"inlinewritedata"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inlinewritedata"}},[t._v("#")]),t._v(" InlineWriteData")]),t._v(" "),e("p",[t._v("Convenience structure for stream Async-Inline write operations.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" data "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" buffer "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InlineWriteData")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"fields-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fields-2"}},[t._v("#")]),t._v(" Fields")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Type")]),t._v(" "),e("th",[t._v("Name")]),t._v(" "),e("th",[t._v("Summary")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("const void*")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#inlinewritedata-currbufferptr"}},[t._v("currBufferPtr")])]),t._v(" "),e("td",[t._v("Pointer to current position in the buffer.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("v_buff_size")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#inlinewritedata-bytesleft"}},[t._v("bytesLeft")])]),t._v(" "),e("td",[t._v("Bytes left to write from the buffer.")])])])]),t._v(" "),e("h3",{attrs:{id:"methods-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#methods-2"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Return Type")]),t._v(" "),e("th",[t._v("Name")]),t._v(" "),e("th",[t._v("Summary")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("[none]")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#inlinewritedata-inlinewritedata"}},[t._v("InlineWriteData")])]),t._v(" "),e("td",[t._v("Multiple implementations: "),e("br"),e("ol",[e("li",[t._v("Default constructor. ")]),e("li",[t._v("Constructor. ")])])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("void")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#inlinewritedata-set"}},[t._v("set")])]),t._v(" "),e("td",[t._v("Set "),e("code",[t._v("currBufferPtr")]),t._v(" and "),e("code",[t._v("bytesLeft")]),t._v(" values. "),e("br")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("void")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#inlinewritedata-inc"}},[t._v("inc")])]),t._v(" "),e("td",[t._v("Increase position in the write buffer by "),e("code",[t._v("amount")]),t._v(" bytes. "),e("br")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("void")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#inlinewritedata-seteof"}},[t._v("setEof")])]),t._v(" "),e("td",[t._v("Same as "),e("code",[t._v("inc(bytesLeft).")])])])])]),t._v(" "),e("h3",{attrs:{id:"inlinewritedata-currbufferptr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inlinewritedata-currbufferptr"}},[t._v("#")]),t._v(" InlineWriteData::currBufferPtr")]),t._v(" "),e("p",[t._v("Pointer to current position in the buffer.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" currBufferPtr\n")])])]),e("h3",{attrs:{id:"inlinewritedata-bytesleft"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inlinewritedata-bytesleft"}},[t._v("#")]),t._v(" InlineWriteData::bytesLeft")]),t._v(" "),e("p",[t._v("Bytes left to write from the buffer.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("v_buff_size bytesLeft\n")])])]),e("h3",{attrs:{id:"inlinewritedata-inlinewritedata"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inlinewritedata-inlinewritedata"}},[t._v("#")]),t._v(" InlineWriteData::InlineWriteData")]),t._v(" "),e("ol",[e("li",[t._v("Default constructor."),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("InlineWriteData")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),e("li",[t._v("Constructor. "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" data ")]),e("li",[e("strong",[t._v("@param")]),t._v(" size ")])]),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("InlineWriteData")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),e("h3",{attrs:{id:"inlinewritedata-set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inlinewritedata-set"}},[t._v("#")]),t._v(" InlineWriteData::set")]),t._v(" "),e("p",[t._v("Set "),e("code",[t._v("currBufferPtr")]),t._v(" and "),e("code",[t._v("bytesLeft")]),t._v(" values. "),e("br"),t._v(" "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" data - pointer to buffer containing data to be written. ")]),e("li",[e("strong",[t._v("@param")]),t._v(" size - size in bytes of the buffer. ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"inlinewritedata-inc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inlinewritedata-inc"}},[t._v("#")]),t._v(" InlineWriteData::inc")]),t._v(" "),e("p",[t._v("Increase position in the write buffer by "),e("code",[t._v("amount")]),t._v(" bytes. "),e("br"),t._v(" This will increase "),e("code",[t._v("currBufferPtr")]),t._v(" and descrease "),e("code",[t._v("bytesLeft")]),t._v(" values. "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" amount ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("inc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v_buff_size amount"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"inlinewritedata-seteof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inlinewritedata-seteof"}},[t._v("#")]),t._v(" InlineWriteData::setEof")]),t._v(" "),e("p",[t._v("Same as "),e("code",[t._v("inc(bytesLeft).")])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setEof")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"processor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processor"}},[t._v("#")]),t._v(" Processor")]),t._v(" "),e("p",[t._v("Buffer processor. Note: all processors are considered to be stateful.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" data "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" buffer "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Processor")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"methods-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#methods-3"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Return Type")]),t._v(" "),e("th",[t._v("Name")]),t._v(" "),e("th",[t._v("Summary")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("[none]")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#processor-~processor"}},[t._v("~Processor")])]),t._v(" "),e("td",[t._v("Default virtual destructor.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("v_io_size")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#processor-suggestinputstreamreadsize"}},[t._v("suggestInputStreamReadSize")])]),t._v(" "),e("td",[t._v("If the client is using the input stream to read data and push it to the processor,")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("v_int32")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#processor-iterate"}},[t._v("iterate")])]),t._v(" "),e("td",[t._v("Process data.")])])])]),t._v(" "),e("h3",{attrs:{id:"processor-processor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processor-processor"}},[t._v("#")]),t._v(" Processor::~Processor")]),t._v(" "),e("p",[t._v("Default virtual destructor.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Processor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v("\n")])])]),e("h3",{attrs:{id:"processor-suggestinputstreamreadsize"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processor-suggestinputstreamreadsize"}},[t._v("#")]),t._v(" Processor::suggestInputStreamReadSize")]),t._v(" "),e("p",[t._v("If the client is using the input stream to read data and push it to the processor, the client MAY ask the processor for a suggested read size. "),e("ul",[e("li",[e("strong",[t._v("@return")]),t._v(" - suggested read size. ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" v_io_size "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("suggestInputStreamReadSize")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),e("h3",{attrs:{id:"processor-iterate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processor-iterate"}},[t._v("#")]),t._v(" Processor::iterate")]),t._v(" "),e("p",[t._v("Process data. "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" dataIn - data provided by client to processor. Input data. data::buffer::InlineReadData. Set "),e("code",[t._v("dataIn")]),t._v(" buffer pointer to "),e("code",[t._v("nullptr")]),t._v(" to designate the end of input. ")]),e("li",[e("strong",[t._v("@param")]),t._v(" dataOut - data provided to client by processor. Output data. data::buffer::InlineReadData. ")]),e("li",[e("strong",[t._v("@return")]),t._v(" - "),e("a",{attrs:{href:"#processor-error"}},[t._v("Processor::Error")]),t._v(". ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" v_int32 "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("buffer"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("InlineReadData"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" dataIn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                        data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("buffer"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("InlineReadData"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" dataOut"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),e("h2",{attrs:{id:"processor-error"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processor-error"}},[t._v("#")]),t._v(" Processor::Error")]),t._v(" "),e("p",[t._v("Enum of processing errors.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" data "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" buffer "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Processor")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"processor-error-ok"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processor-error-ok"}},[t._v("#")]),t._v(" Processor::Error::OK")]),t._v(" "),e("p",[t._v("No error.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("OK "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),e("h3",{attrs:{id:"processor-error-provide-data-in"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processor-error-provide-data-in"}},[t._v("#")]),t._v(" Processor::Error::PROVIDE_DATA_IN")]),t._v(" "),e("p",[t._v("Caller must set fields of "),e("code",[t._v("dataIn")]),t._v(" parameter.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("PROVIDE_DATA_IN "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),e("h3",{attrs:{id:"processor-error-flush-data-out"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processor-error-flush-data-out"}},[t._v("#")]),t._v(" Processor::Error::FLUSH_DATA_OUT")]),t._v(" "),e("p",[t._v("Caller must read all the data from the "),e("code",[t._v("dataOut")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("FLUSH_DATA_OUT "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),e("h3",{attrs:{id:"processor-error-finished"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processor-error-finished"}},[t._v("#")]),t._v(" Processor::Error::FINISHED")]),t._v(" "),e("p",[t._v("Processing is finished.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("FINISHED "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//*********************************************//")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Other values are processor-specific errors. //")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//*********************************************//")]),t._v("\n")])])]),e("h2",{attrs:{id:"processingpipeline"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processingpipeline"}},[t._v("#")]),t._v(" ProcessingPipeline")]),t._v(" "),e("p",[t._v("Pipeline of buffer processors.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" data "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" buffer "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProcessingPipeline")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Processor "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"methods-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#methods-4"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Return Type")]),t._v(" "),e("th",[t._v("Name")]),t._v(" "),e("th",[t._v("Summary")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("[none]")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#processingpipeline-processingpipeline"}},[t._v("ProcessingPipeline")])]),t._v(" "),e("td",[t._v("Constructor.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("v_io_size")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#processingpipeline-suggestinputstreamreadsize"}},[t._v("suggestInputStreamReadSize")])]),t._v(" "),e("td",[t._v("If the client is using the input stream to read data and push it to the processor,")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("v_int32")])]),t._v(" "),e("td",[e("a",{attrs:{href:"#processingpipeline-iterate"}},[t._v("iterate")])]),t._v(" "),e("td",[t._v("Process data.")])])])]),t._v(" "),e("h3",{attrs:{id:"processingpipeline-processingpipeline"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processingpipeline-processingpipeline"}},[t._v("#")]),t._v(" ProcessingPipeline::ProcessingPipeline")]),t._v(" "),e("p",[t._v("Constructor. "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" m_processors - the array of processors defining the pipeline. ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProcessingPipeline")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("vector"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("base"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ObjectHandle"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Processor"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" m_processors"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"processingpipeline-suggestinputstreamreadsize"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processingpipeline-suggestinputstreamreadsize"}},[t._v("#")]),t._v(" ProcessingPipeline::suggestInputStreamReadSize")]),t._v(" "),e("p",[t._v("If the client is using the input stream to read data and push it to the processor, the client MAY ask the processor for a suggested read size. "),e("ul",[e("li",[e("strong",[t._v("@return")]),t._v(" - suggested read size. ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("v_io_size "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("suggestInputStreamReadSize")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),e("h3",{attrs:{id:"processingpipeline-iterate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processingpipeline-iterate"}},[t._v("#")]),t._v(" ProcessingPipeline::iterate")]),t._v(" "),e("p",[t._v("Process data. "),e("ul",[e("li",[e("strong",[t._v("@param")]),t._v(" dataIn - data provided by client to processor. Input data. data::buffer::InlineReadData. Set "),e("code",[t._v("dataIn")]),t._v(" buffer pointer to "),e("code",[t._v("nullptr")]),t._v(" to designate the end of input. ")]),e("li",[e("strong",[t._v("@param")]),t._v(" dataOut - data provided to client by processor. Output data. data::buffer::InlineReadData. ")]),e("li",[e("strong",[t._v("@return")]),t._v(" - "),e("a",{attrs:{href:"#processor-error"}},[t._v("Processor::Error")]),t._v(". ")])])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("v_int32 "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("buffer"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("InlineReadData"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" dataIn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("buffer"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("InlineReadData"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" dataOut"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);