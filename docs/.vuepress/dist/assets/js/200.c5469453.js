(window.webpackJsonp=window.webpackJsonp||[]).push([[200],{572:function(t,a,s){"use strict";s.r(a);var e=s(42),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"hex-hpp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hex-hpp"}},[t._v("#")]),t._v(" Hex.hpp"),s("seo")],1),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/oatpp/oatpp/blob/master/src/oatpp/encoding/Hex.hpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("This File On Github"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://github.com/oatpp/oatpp/issues/new?title=API%20question&body=In%20file:%20oatpp/encoding/Hex.hpp%0A%0A%23%20Question%0A%0A%3Cyour-question-here%3E",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ask A Question"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("code",[t._v("API: latest")]),s("br"),t._v(" "),s("code",[t._v("module: oatpp")]),s("br"),t._v(" "),s("code",[t._v('#include "oatpp/encoding/Hex.hpp"')])]),t._v(" "),s("h2",{attrs:{id:"hex"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hex"}},[t._v("#")]),t._v(" Hex")]),t._v(" "),s("p",[t._v("Utility class for hex string encoding/decoding .")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" encoding "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hex")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"fields"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fields"}},[t._v("#")]),t._v(" Fields")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Type")]),t._v(" "),s("th",[t._v("Name")]),t._v(" "),s("th",[t._v("Summary")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("v_int32")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#hex-error-unknown-symbol"}},[t._v("ERROR_UNKNOWN_SYMBOL")])]),t._v(" "),s("td",[t._v("Unknown symbol error.")])])])]),t._v(" "),s("h3",{attrs:{id:"methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Return Type")]),t._v(" "),s("th",[t._v("Name")]),t._v(" "),s("th",[t._v("Summary")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("void")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#hex-writeuint16"}},[t._v("writeUInt16")])]),t._v(" "),s("td",[t._v("Write value as hex string to buffer.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("void")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#hex-writeuint32"}},[t._v("writeUInt32")])]),t._v(" "),s("td",[t._v("Write value as hex string to buffer.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("v_int32")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#hex-readuint16"}},[t._v("readUInt16")])]),t._v(" "),s("td",[t._v("Parse 4-char hex string to int16.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("v_int32")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#hex-readuint32"}},[t._v("readUInt32")])]),t._v(" "),s("td",[t._v("Parse 8-char hex string to int32.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("void")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#hex-encode"}},[t._v("encode")])]),t._v(" "),s("td",[t._v("Write binary data as HEX string.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("void")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#hex-decode"}},[t._v("decode")])]),t._v(" "),s("td",[t._v("Read binary data from hex string.")])])])]),t._v(" "),s("h3",{attrs:{id:"hex-error-unknown-symbol"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hex-error-unknown-symbol"}},[t._v("#")]),t._v(" Hex::ERROR_UNKNOWN_SYMBOL")]),t._v(" "),s("p",[t._v("Unknown symbol error.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constexpr")]),t._v(" v_int32 ERROR_UNKNOWN_SYMBOL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("h3",{attrs:{id:"hex-writeuint16"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hex-writeuint16"}},[t._v("#")]),t._v(" Hex::writeUInt16")]),t._v(" "),s("p",[t._v("Write value as hex string to buffer. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" value - value to write. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" buffer - buffer for resultant string. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeUInt16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v_uint16 value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p_char8 buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"hex-writeuint32"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hex-writeuint32"}},[t._v("#")]),t._v(" Hex::writeUInt32")]),t._v(" "),s("p",[t._v("Write value as hex string to buffer. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" value - value to write. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" buffer - buffer for resultant string. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeUInt32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v_uint32 value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p_char8 buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"hex-readuint16"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hex-readuint16"}},[t._v("#")]),t._v(" Hex::readUInt16")]),t._v(" "),s("p",[t._v("Parse 4-char hex string to int16. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" buffer - buffer containing string to parse. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" value - out parameter. Resultant value. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - 0 on success. Negative value on failure. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" v_int32 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readUInt16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_uint16"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"hex-readuint32"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hex-readuint32"}},[t._v("#")]),t._v(" Hex::readUInt32")]),t._v(" "),s("p",[t._v("Parse 8-char hex string to int32. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" buffer - buffer containing string to parse. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" value - out parameter. Resultant value. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - 0 on success. Negative value on failure. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" v_int32 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readUInt32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_uint32"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"hex-encode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hex-encode"}},[t._v("#")]),t._v(" Hex::encode")]),t._v(" "),s("p",[t._v("Write binary data as HEX string. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" stream ")]),s("li",[s("strong",[t._v("@param")]),t._v(" data ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size ")]),s("li",[s("strong",[t._v("@param")]),t._v(" alphabet ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("encode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ConsistentOutputStream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" alphabet "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ALPHABET_UPPER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"hex-decode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hex-decode"}},[t._v("#")]),t._v(" Hex::decode")]),t._v(" "),s("p",[t._v("Read binary data from hex string. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" stream ")]),s("li",[s("strong",[t._v("@param")]),t._v(" data ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size ")]),s("li",[s("strong",[t._v("@param")]),t._v(" allowSeparators - skip any char which is not ([A-Z], [a-z], [0-9]) without error. ")]),s("li",[s("strong",[t._v("@throws")]),t._v(" - "),s("a",{attrs:{href:"#hex-decodingerror"}},[t._v("Hex::DecodingError")])])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("decode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ConsistentOutputStream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" allowSeparators "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"hex-decodingerror"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hex-decodingerror"}},[t._v("#")]),t._v(" Hex::DecodingError")]),t._v(" "),s("p",[t._v("DecodingError.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" encoding "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hex")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DecodingError")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("runtime_error "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"methods-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods-2"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Return Type")]),t._v(" "),s("th",[t._v("Name")]),t._v(" "),s("th",[t._v("Summary")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("[none]")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#hex-decodingerror-decodingerror"}},[t._v("DecodingError")])]),t._v(" "),s("td",[t._v("Constructor.")])])])]),t._v(" "),s("h3",{attrs:{id:"hex-decodingerror-decodingerror"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hex-decodingerror-decodingerror"}},[t._v("#")]),t._v(" Hex::DecodingError::DecodingError")]),t._v(" "),s("p",[t._v("Constructor. "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" message - error message. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("DecodingError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("runtime_error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);