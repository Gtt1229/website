(window.webpackJsonp=window.webpackJsonp||[]).push([[198],{570:function(t,a,s){"use strict";s.r(a);var e=s(42),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"string-hpp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-hpp"}},[t._v("#")]),t._v(" String.hpp"),s("seo")],1),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/oatpp/oatpp/blob/master/src/oatpp/core/utils/String.hpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("This File On Github"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://github.com/oatpp/oatpp/issues/new?title=API%20question&body=In%20file:%20oatpp/core/utils/String.hpp%0A%0A%23%20Question%0A%0A%3Cyour-question-here%3E",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ask A Question"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("code",[t._v("API: latest")]),s("br"),t._v(" "),s("code",[t._v("module: oatpp")]),s("br"),t._v(" "),s("code",[t._v('#include "oatpp/core/utils/String.hpp"')])]),t._v(" "),s("h2",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),s("p",[t._v("Utility class for Strings")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" utils "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Return Type")]),t._v(" "),s("th",[t._v("Name")]),t._v(" "),s("th",[t._v("Summary")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("v_buff_size")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#string-compare"}},[t._v("compare")])]),t._v(" "),s("td",[t._v("Compare data1, data2 using "),s("code",[t._v("std::memcmp")]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("v_buff_size")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#string-compareci-ascii"}},[t._v("compareCI_ASCII")])]),t._v(" "),s("td",[t._v("Compare data1, data2 - case insensitive (ASCII only).")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("void")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#string-lowercase-ascii"}},[t._v("lowerCase_ASCII")])]),t._v(" "),s("td",[t._v("Change characters in data to lowercase (ASCII only).")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("void")])]),t._v(" "),s("td",[s("a",{attrs:{href:"#string-uppercase-ascii"}},[t._v("upperCase_ASCII")])]),t._v(" "),s("td",[t._v("Change characters in data to uppercase (ASCII only).")])])])]),t._v(" "),s("h3",{attrs:{id:"string-compare"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-compare"}},[t._v("#")]),t._v(" String::compare")]),t._v(" "),s("p",[t._v("Compare data1, data2 using "),s("code",[t._v("std::memcmp")]),t._v(". "),s("em",[t._v("It's safe to pass nullptr for data1/data2")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data1 - pointer to data1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size1 - size of data1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" data2 - pointer to data2. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size2 - size of data2. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - Negative value if the first differing byte (reinterpreted as unsigned char) in data1 is less than the corresponding byte in data2."),s("br"),t._v(" 0 if all count bytes of data1 and data2 are equal."),s("br"),t._v(" Positive value if the first differing byte in data1 is greater than the corresponding byte in data2. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" v_buff_size "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compare")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"string-compareci-ascii"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-compareci-ascii"}},[t._v("#")]),t._v(" String::compareCI_ASCII")]),t._v(" "),s("p",[t._v("Compare data1, data2 - case insensitive (ASCII only). "),s("em",[t._v("It's safe to pass nullptr for data1/data2")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data1 - pointer to data1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size1 - size of data1. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" data2 - pointer to data2. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size2 - size of data2. ")]),s("li",[s("strong",[t._v("@return")]),t._v(" - Negative value if the first differing byte (reinterpreted as unsigned char) in data1 is less than the corresponding byte in data2."),s("br"),t._v(" 0 if all count bytes of data1 and data2 are equal."),s("br"),t._v(" Positive value if the first differing byte in data1 is greater than the corresponding byte in data2. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" v_buff_size "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareCI_ASCII")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"string-lowercase-ascii"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-lowercase-ascii"}},[t._v("#")]),t._v(" String::lowerCase_ASCII")]),t._v(" "),s("p",[t._v("Change characters in data to lowercase (ASCII only). "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data - pointer to data. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size - size of the data. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lowerCase_ASCII")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"string-uppercase-ascii"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-uppercase-ascii"}},[t._v("#")]),t._v(" String::upperCase_ASCII")]),t._v(" "),s("p",[t._v("Change characters in data to uppercase (ASCII only). "),s("ul",[s("li",[s("strong",[t._v("@param")]),t._v(" data - pointer to data. ")]),s("li",[s("strong",[t._v("@param")]),t._v(" size - size of the data. ")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("upperCase_ASCII")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);