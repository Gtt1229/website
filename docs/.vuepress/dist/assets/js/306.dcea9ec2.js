(window.webpackJsonp=window.webpackJsonp||[]).push([[306],{677:function(t,e,i){"use strict";i.r(e);var s=i(42),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"monolithization"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#monolithization"}},[t._v("#")]),t._v(" Monolithization "),i("seo")],1),t._v(" "),i("p",[t._v("Monolithization is the technique that enables you to scale your microservices better.\nYou can develop regular microservices in Oat++, and when there is a little to no load in your system,\nyou can consolidate your services in a single monolith. Also, consolidated services perform better and consume less memory.\nThus you can reduce your infrastructure costs by reducing network overhead and minimizing the number of running instances.")]),t._v(" "),i("p",[t._v("The best way to understand Monolithization and how it works is through example.")]),t._v(" "),i("p"),i("div",{staticClass:"table-of-contents"},[i("ul",[i("li",[i("a",{attrs:{href:"#example"}},[t._v("Example")])]),i("li",[i("a",{attrs:{href:"#the-problem"}},[t._v("The Problem")])]),i("li",[i("a",{attrs:{href:"#the-concept-of-monolithization"}},[t._v("The Concept of Monolithization")]),i("ul",[i("li",[i("a",{attrs:{href:"#service-interfaces"}},[t._v("Service Interfaces")])]),i("li",[i("a",{attrs:{href:"#build-pipeline"}},[t._v("Build Pipeline")])]),i("li",[i("a",{attrs:{href:"#scaling"}},[t._v("Scaling")])])])]),i("li",[i("a",{attrs:{href:"#performance"}},[t._v("Performance")]),i("ul",[i("li",[i("a",{attrs:{href:"#requests-per-second"}},[t._v("Requests Per Second")])]),i("li",[i("a",{attrs:{href:"#memory-usage-mb"}},[t._v("Memory Usage (Mb)")])])])]),i("li",[i("a",{attrs:{href:"#links"}},[t._v("Links")])])])]),i("p"),t._v(" "),i("h2",{attrs:{id:"example"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),i("p",[t._v("Consider the following system consisting of three trivial microservices:")]),t._v(" "),i("ul",[i("li",[t._v("User Service")]),t._v(" "),i("li",[t._v("Book Service")]),t._v(" "),i("li",[t._v("Facade")])]),t._v(" "),i("img",{attrs:{alt:"Example microservices system",src:"https://raw.githubusercontent.com/lganzzzo/oatpp-website-res/master/website/monolithization/svg/load-setup.svg?sanitize=true",width:"650px"}}),t._v(" "),i("p",[t._v("Facade requests user information from User-Service, book information from Book-Service. Then merges the data and returns to the client.")]),t._v(" "),i("h2",{attrs:{id:"the-problem"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#the-problem"}},[t._v("#")]),t._v(" The Problem")]),t._v(" "),i("p",[t._v("When there is a little load in this system, there is no need to scale its parts.\nThus it would be better to have this system as a monolith in order not to spawn multiple instances or containers.\nBut you want to keep microservices architecture, in order to be flexible in the future when there is a load.")]),t._v(" "),i("p",[t._v("You could probably deploy all services on a single instance running in separate processes.\nBut in this case, it's additional dev-ops effort. Plus, you still have the network overhead, as communicating through localhost decreases performance.")]),t._v(" "),i("h2",{attrs:{id:"the-concept-of-monolithization"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#the-concept-of-monolithization"}},[t._v("#")]),t._v(" The Concept of Monolithization")]),t._v(" "),i("p",[t._v("The concept is simple. - We are going to put all the services in a single process.\nAnd we are going to make services communicate through the Oat++ "),i("strong",[t._v("virtual connections")]),t._v(".")]),t._v(" "),i("img",{attrs:{alt:"Monolithization concept",src:"https://raw.githubusercontent.com/lganzzzo/oatpp-website-res/master/website/monolithization/svg/microservices-monolithizated.svg?sanitize=true",width:"500px"}}),t._v(" "),i("p",[t._v("The Oat++ virtual connections substitute the network transport layer, so that your application logic can stay isolated.\nAnd they utilize internal buffers so that there is no network overhead as in case of communicating through the localhost.")]),t._v(" "),i("h3",{attrs:{id:"service-interfaces"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#service-interfaces"}},[t._v("#")]),t._v(" Service Interfaces")]),t._v(" "),i("p",[t._v("Consolidated services can keep their network interfaces, to be available for remote services.\nAnd they have to expose the virtual interface to communicate with consolidated services via virtual connections.")]),t._v(" "),i("img",{attrs:{alt:"Service interfaces",src:"https://raw.githubusercontent.com/lganzzzo/oatpp-website-res/master/website/monolithization/svg/monolithization-interfaces.svg?sanitize=true",width:"600px"}}),t._v(" "),i("h3",{attrs:{id:"build-pipeline"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#build-pipeline"}},[t._v("#")]),t._v(" Build Pipeline")]),t._v(" "),i("p",[t._v("The good thing is that you don't have to change your build pipeline. Each team can develop its microservices independently from others."),i("br"),t._v("\nAll you need to do is to create a monolithic configuration for each set of microservices you want to consolidate.")]),t._v(" "),i("img",{attrs:{alt:"Build pipeline",src:"https://storage.googleapis.com/website-res/building-monolith.svg",width:"600px"}}),t._v(" "),i("h3",{attrs:{id:"scaling"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#scaling"}},[t._v("#")]),t._v(" Scaling")]),t._v(" "),i("p",[t._v("With Monolithization, you can scale gradually.\nStep by step, adding new monolithic deployments and decoupling your monolith into smaller pieces so that you can achieve the best configuration for your cloud.")]),t._v(" "),i("table",{staticStyle:{width:"100%"}},[i("tr",[i("th",[t._v("Step 1")]),t._v(" "),i("th",[t._v("Step 2")]),t._v(" "),i("th",[t._v("Step 3")])]),t._v(" "),i("tr",[i("td",[i("img",{attrs:{alt:"Scaling step 1",src:"https://raw.githubusercontent.com/lganzzzo/oatpp-website-res/master/website/monolithization/svg/decoupling-1.svg?sanitize=true",width:"180px"}})]),t._v(" "),i("td",[i("img",{attrs:{alt:"Scaling step 2",src:"https://raw.githubusercontent.com/lganzzzo/oatpp-website-res/master/website/monolithization/svg/decoupling-2.svg?sanitize=true",width:"300px"}})]),t._v(" "),i("td",[i("img",{attrs:{alt:"Scaling step 3",src:"https://raw.githubusercontent.com/lganzzzo/oatpp-website-res/master/website/monolithization/svg/decoupling-3.svg?sanitize=true",width:"400px"}})])])]),t._v(" "),i("h2",{attrs:{id:"performance"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#performance"}},[t._v("#")]),t._v(" Performance")]),t._v(" "),i("p",[t._v("Below is the performance comparison of Oat++ microservices(deployed on the same instance) versus same microservices consolidated via Monolithization.")]),t._v(" "),i("img",{attrs:{alt:"Performance test setup",src:"https://raw.githubusercontent.com/lganzzzo/oatpp-website-res/master/website/monolithization/svg/load-monolithizated.svg?sanitize=true",width:"650px"}}),t._v(" "),i("h3",{attrs:{id:"requests-per-second"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#requests-per-second"}},[t._v("#")]),t._v(" Requests Per Second")]),t._v(" "),i("img",{attrs:{alt:"Requests per second",src:"https://raw.githubusercontent.com/lganzzzo/oatpp-website-res/master/website/monolithization/svg/micro-vs-monolith.svg?sanitize=true",width:"800px"}}),t._v(" "),i("h3",{attrs:{id:"memory-usage-mb"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#memory-usage-mb"}},[t._v("#")]),t._v(" Memory Usage (Mb)")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th"),t._v(" "),i("th",[t._v("Facade")]),t._v(" "),i("th",[t._v("User Service")]),t._v(" "),i("th",[t._v("Book Service")]),t._v(" "),i("th",[t._v("Total")])])]),t._v(" "),i("tbody",[i("tr",[i("td",[t._v("Oat++ (micro-svc) idle")]),t._v(" "),i("td",[t._v("25")]),t._v(" "),i("td",[t._v("3")]),t._v(" "),i("td",[t._v("3")]),t._v(" "),i("td",[t._v("31")])]),t._v(" "),i("tr",[i("td",[t._v("Oat++ (micro-svc) load")]),t._v(" "),i("td",[t._v("45")]),t._v(" "),i("td",[t._v("3.2")]),t._v(" "),i("td",[t._v("3.2")]),t._v(" "),i("td",[t._v("49.4")])]),t._v(" "),i("tr",[i("td",[t._v("Oat++ (monolith) idle")]),t._v(" "),i("td",[t._v("-")]),t._v(" "),i("td",[t._v("-")]),t._v(" "),i("td",[t._v("-")]),t._v(" "),i("td",[t._v("26.7")])]),t._v(" "),i("tr",[i("td",[t._v("Oat++ (monolith) load")]),t._v(" "),i("td",[t._v("-")]),t._v(" "),i("td",[t._v("-")]),t._v(" "),i("td",[t._v("-")]),t._v(" "),i("td",[t._v("37.7")])])])]),t._v(" "),i("h2",{attrs:{id:"links"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[t._v("#")]),t._v(" Links")]),t._v(" "),i("p",[i("a",{attrs:{href:"https://github.com/oatpp/example-microservices",target:"_blank",rel:"noopener noreferrer"}},[t._v("Example Project Repository"),i("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=o.exports}}]);