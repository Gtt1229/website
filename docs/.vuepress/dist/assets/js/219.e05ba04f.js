(window.webpackJsonp=window.webpackJsonp||[]).push([[219],{591:function(t,e,a){"use strict";a.r(e);var r=a(42),o=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"connectionprovider-hpp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider-hpp"}},[t._v("#")]),t._v(" ConnectionProvider.hpp"),a("seo")],1),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/oatpp/oatpp/blob/master/src/oatpp/network/virtual_/server/ConnectionProvider.hpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("This File On Github"),a("OutboundLink")],1),a("br"),t._v(" "),a("a",{attrs:{href:"https://github.com/oatpp/oatpp/issues/new?title=API%20question&body=In%20file:%20oatpp/network/virtual_/server/ConnectionProvider.hpp%0A%0A%23%20Question%0A%0A%3Cyour-question-here%3E",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ask A Question"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("code",[t._v("API: latest")]),a("br"),t._v(" "),a("code",[t._v("module: oatpp")]),a("br"),t._v(" "),a("code",[t._v('#include "oatpp/network/virtual_/server/ConnectionProvider.hpp"')])]),t._v(" "),a("h2",{attrs:{id:"connectionprovider"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider"}},[t._v("#")]),t._v(" ConnectionProvider")]),t._v(" "),a("p",[t._v('Provider of "virtual" connections. See '),a("RouterLink",{attrs:{to:"/api/latest/oatpp/network/virtual_/Interface/#interface"}},[t._v("oatpp::network::virtual_::Interface")]),t._v(", "),a("RouterLink",{attrs:{to:"/api/latest/oatpp/network/virtual_/Socket/#socket"}},[t._v("oatpp::network::virtual_::Socket")]),t._v(" "),a("br"),t._v(" Extends "),a("RouterLink",{attrs:{to:"/api/latest/oatpp/network/ConnectionProvider/#serverconnectionprovider"}},[t._v("oatpp::network::ServerConnectionProvider")]),t._v(".")],1),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" network "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" virtual_ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConnectionProvider")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" oatpp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ServerConnectionProvider "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Return Type")]),t._v(" "),a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("[none]")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#connectionprovider-connectionprovider"}},[t._v("ConnectionProvider")])]),t._v(" "),a("td",[t._v("Constructor.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::shared_ptr<ConnectionProvider>")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#connectionprovider-createshared"}},[t._v("createShared")])]),t._v(" "),a("td",[t._v("Create shared ConnectionProvider.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("void")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#connectionprovider-setsocketmaxavailabletoreadwrtie"}},[t._v("setSocketMaxAvailableToReadWrtie")])]),t._v(" "),a("td",[t._v("Limit the available amount of bytes to read from socket and limit the available amount of bytes to write to socket. "),a("br")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("void")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#connectionprovider-stop"}},[t._v("stop")])]),t._v(" "),a("td",[t._v("Break accepting loop.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("provider::ResourceHandle<data::stream::IOStream>")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#connectionprovider-get"}},[t._v("get")])]),t._v(" "),a("td",[t._v("Get incoming connection.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("oatpp::async::CoroutineStarterForResult<const provider::ResourceHandle<data::stream::IOStream>&>")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#connectionprovider-getasync"}},[t._v("getAsync")])]),t._v(" "),a("td",[a("strong",[t._v("NOT IMPLEMENTED!")]),a("br")])])])]),t._v(" "),a("h3",{attrs:{id:"connectionprovider-connectionprovider"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider-connectionprovider"}},[t._v("#")]),t._v(" ConnectionProvider::ConnectionProvider")]),t._v(" "),a("p",[t._v("Constructor. "),a("ul",[a("li",[a("strong",[t._v("@param")]),t._v(" interface - "),a("RouterLink",{attrs:{to:"/api/latest/oatpp/network/virtual_/Interface/#interface"}},[t._v("oatpp::network::virtual_::Interface")]),t._v(". ")],1)])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConnectionProvider")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("virtual_"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Interface"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" _interface"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"connectionprovider-createshared"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider-createshared"}},[t._v("#")]),t._v(" ConnectionProvider::createShared")]),t._v(" "),a("p",[t._v("Create shared ConnectionProvider. "),a("ul",[a("li",[a("strong",[t._v("@param")]),t._v(" interface - "),a("RouterLink",{attrs:{to:"/api/latest/oatpp/network/virtual_/Interface/#interface"}},[t._v("oatpp::network::virtual_::Interface")]),t._v(". ")],1),a("li",[a("strong",[t._v("@return")]),t._v(" - "),a("code",[t._v("std::shared_ptr")]),t._v(" to ConnectionProvider. ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ConnectionProvider"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShared")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("virtual_"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Interface"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" _interface"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"connectionprovider-setsocketmaxavailabletoreadwrtie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider-setsocketmaxavailabletoreadwrtie"}},[t._v("#")]),t._v(" ConnectionProvider::setSocketMaxAvailableToReadWrtie")]),t._v(" "),a("p",[t._v("Limit the available amount of bytes to read from socket and limit the available amount of bytes to write to socket. "),a("br"),t._v(" This method is used for testing purposes only."),a("br"),t._v(" "),a("ul",[a("li",[a("strong",[t._v("@param")]),t._v(" maxToRead - maximum available amount of bytes to read. ")]),a("li",[a("strong",[t._v("@param")]),t._v(" maxToWrite - maximum available amount of bytes to write. ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setSocketMaxAvailableToReadWrtie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v_io_size maxToRead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_io_size maxToWrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"connectionprovider-stop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider-stop"}},[t._v("#")]),t._v(" ConnectionProvider::stop")]),t._v(" "),a("p",[t._v("Break accepting loop.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),a("h3",{attrs:{id:"connectionprovider-get"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider-get"}},[t._v("#")]),t._v(" ConnectionProvider::get")]),t._v(" "),a("p",[t._v("Get incoming connection. "),a("ul",[a("li",[a("strong",[t._v("@return")]),t._v(" "),a("RouterLink",{attrs:{to:"/api/latest/oatpp/core/data/stream/Stream/#iostream"}},[t._v("oatpp::data::stream::IOStream")]),t._v(". ")],1)])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("provider"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ResourceHandle"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stream"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IOStream"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])]),a("h3",{attrs:{id:"connectionprovider-getasync"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connectionprovider-getasync"}},[t._v("#")]),t._v(" ConnectionProvider::getAsync")]),t._v(" "),a("p",[a("strong",[t._v("NOT IMPLEMENTED!")]),a("br"),t._v(" No need to implement this."),a("br"),t._v(" For Asynchronous IO in oatpp it is considered to be a good practice to accept connections in a seperate thread with the blocking accept() and then process connections in Asynchronous manner with non-blocking read/write. "),a("br"),t._v(" "),a("em",[t._v("It may be implemented later.")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("oatpp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("async"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("CoroutineStarterForResult"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" provider"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ResourceHandle"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("stream"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IOStream"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAsync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" override\n")])])])])}),[],!1,null,null,null);e.default=o.exports}}]);