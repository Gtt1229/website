(window.webpackJsonp=window.webpackJsonp||[]).push([[230],{603:function(e,a,t){"use strict";t.r(a);var s=t(42),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"serializer-hpp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serializer-hpp"}},[e._v("#")]),e._v(" Serializer.hpp"),t("seo")],1),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/oatpp/oatpp/blob/master/src/oatpp/parser/json/mapping/Serializer.hpp",target:"_blank",rel:"noopener noreferrer"}},[e._v("This File On Github"),t("OutboundLink")],1),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.com/oatpp/oatpp/issues/new?title=API%20question&body=In%20file:%20oatpp/parser/json/mapping/Serializer.hpp%0A%0A%23%20Question%0A%0A%3Cyour-question-here%3E",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ask A Question"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("code",[e._v("API: latest")]),t("br"),e._v(" "),t("code",[e._v("module: oatpp")]),t("br"),e._v(" "),t("code",[e._v('#include "oatpp/parser/json/mapping/Serializer.hpp"')])]),e._v(" "),t("h2",{attrs:{id:"serializer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serializer"}},[e._v("#")]),e._v(" Serializer")]),e._v(" "),t("p",[e._v("Json Serializer. Serializes oatpp DTO object to json. See "),t("a",{attrs:{href:"https://oatpp.io/docs/components/dto/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Data Transfer Object(DTO) component"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("namespace")]),e._v(" oatpp "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("namespace")]),e._v(" parser "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("namespace")]),e._v(" json "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("namespace")]),e._v(" mapping "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Serializer")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("h2",{attrs:{id:"serializer-config"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serializer-config"}},[e._v("#")]),e._v(" Serializer::Config")]),e._v(" "),t("p",[e._v("Serializer config.")]),e._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("namespace")]),e._v(" oatpp "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("namespace")]),e._v(" parser "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("namespace")]),e._v(" json "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("namespace")]),e._v(" mapping "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Serializer")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Config")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" oatpp"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),e._v("base"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),e._v("Countable "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("h3",{attrs:{id:"fields"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fields"}},[e._v("#")]),e._v(" Fields")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Name")]),e._v(" "),t("th",[e._v("Summary")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("code",[e._v("bool")])]),e._v(" "),t("td",[t("a",{attrs:{href:"#serializer-config-includenullfields"}},[e._v("includeNullFields")])]),e._v(" "),t("td",[e._v("Include fields with value == nullptr into serialized json. Field will still be included when field-info "),t("code",[e._v("required")]),e._v(" is set to true and alwaysIncludeRequired is set to true.")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("bool")])]),e._v(" "),t("td",[t("a",{attrs:{href:"#serializer-config-alwaysincluderequired"}},[e._v("alwaysIncludeRequired")])]),e._v(" "),t("td",[e._v("Always include required fields (set in in DTO_FIELD_INFO) even if they are "),t("code",[e._v("value == nullptr")])])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("bool")])]),e._v(" "),t("td",[t("a",{attrs:{href:"#serializer-config-alwaysincludenullcollectionelements"}},[e._v("alwaysIncludeNullCollectionElements")])]),e._v(" "),t("td",[e._v("Always include array or map elements, even if their value is "),t("code",[e._v("nullptr")]),e._v(".")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("bool")])]),e._v(" "),t("td",[t("a",{attrs:{href:"#serializer-config-throwonunknowntypes"}},[e._v("throwOnUnknownTypes")])]),e._v(" "),t("td",[e._v("If "),t("code",[e._v("true")]),e._v(" - insert string "),t("code",[e._v('"<unknown-type>"')]),e._v(" in json field value in case unknown field found. Fail if "),t("code",[e._v("false")]),e._v(". Known types for this serializer are:"),t("br"),e._v(" (String, Int8, Int16, Int32, Int64, Float32, Float64, Boolean, DTOs, List, Fields).")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("bool")])]),e._v(" "),t("td",[t("a",{attrs:{href:"#serializer-config-usebeautifier"}},[e._v("useBeautifier")])]),e._v(" "),t("td",[e._v("Use JSON Beautifier.")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("oatpp::String")])]),e._v(" "),t("td",[t("a",{attrs:{href:"#serializer-config-beautifierindent"}},[e._v("beautifierIndent")])]),e._v(" "),t("td",[e._v("Beautifier Indent.")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("oatpp::String")])]),e._v(" "),t("td",[t("a",{attrs:{href:"#serializer-config-beautifiernewline"}},[e._v("beautifierNewLine")])]),e._v(" "),t("td",[e._v("Beautifier new line.")])])])]),e._v(" "),t("h3",{attrs:{id:"methods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Return Type")]),e._v(" "),t("th",[e._v("Name")]),e._v(" "),t("th",[e._v("Summary")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("code",[e._v("[none]")])]),e._v(" "),t("td",[t("a",{attrs:{href:"#serializer-config-config"}},[e._v("Config")])]),e._v(" "),t("td",[e._v("Constructor.")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("std::shared_ptr<Config>")])]),e._v(" "),t("td",[t("a",{attrs:{href:"#serializer-config-createshared"}},[e._v("createShared")])]),e._v(" "),t("td",[e._v("Create shared config.")])])])]),e._v(" "),t("h3",{attrs:{id:"serializer-config-includenullfields"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serializer-config-includenullfields"}},[e._v("#")]),e._v(" Serializer::Config::includeNullFields")]),e._v(" "),t("p",[e._v("Include fields with value == nullptr into serialized json. Field will still be included when field-info "),t("code",[e._v("required")]),e._v(" is set to true and alwaysIncludeRequired is set to true.")]),e._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bool")]),e._v(" includeNullFields "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n")])])]),t("h3",{attrs:{id:"serializer-config-alwaysincluderequired"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serializer-config-alwaysincluderequired"}},[e._v("#")]),e._v(" Serializer::Config::alwaysIncludeRequired")]),e._v(" "),t("p",[e._v("Always include required fields (set in in DTO_FIELD_INFO) even if they are "),t("code",[e._v("value == nullptr")])]),e._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bool")]),e._v(" alwaysIncludeRequired "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n")])])]),t("h3",{attrs:{id:"serializer-config-alwaysincludenullcollectionelements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serializer-config-alwaysincludenullcollectionelements"}},[e._v("#")]),e._v(" Serializer::Config::alwaysIncludeNullCollectionElements")]),e._v(" "),t("p",[e._v("Always include array or map elements, even if their value is "),t("code",[e._v("nullptr")]),e._v(".")]),e._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bool")]),e._v(" alwaysIncludeNullCollectionElements "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n")])])]),t("h3",{attrs:{id:"serializer-config-throwonunknowntypes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serializer-config-throwonunknowntypes"}},[e._v("#")]),e._v(" Serializer::Config::throwOnUnknownTypes")]),e._v(" "),t("p",[e._v("If "),t("code",[e._v("true")]),e._v(" - insert string "),t("code",[e._v('"<unknown-type>"')]),e._v(" in json field value in case unknown field found. Fail if "),t("code",[e._v("false")]),e._v(". Known types for this serializer are:"),t("br"),e._v(" (String, Int8, Int16, Int32, Int64, Float32, Float64, Boolean, DTOs, List, Fields).")]),e._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bool")]),e._v(" throwOnUnknownTypes "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n")])])]),t("h3",{attrs:{id:"serializer-config-usebeautifier"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serializer-config-usebeautifier"}},[e._v("#")]),e._v(" Serializer::Config::useBeautifier")]),e._v(" "),t("p",[e._v("Use JSON Beautifier.")]),e._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bool")]),e._v(" useBeautifier "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n")])])]),t("h3",{attrs:{id:"serializer-config-beautifierindent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serializer-config-beautifierindent"}},[e._v("#")]),e._v(" Serializer::Config::beautifierIndent")]),e._v(" "),t("p",[e._v("Beautifier Indent.")]),e._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[e._v("oatpp"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),e._v("String beautifierIndent "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"  "')]),e._v("\n")])])]),t("h3",{attrs:{id:"serializer-config-beautifiernewline"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serializer-config-beautifiernewline"}},[e._v("#")]),e._v(" Serializer::Config::beautifierNewLine")]),e._v(" "),t("p",[e._v("Beautifier new line.")]),e._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[e._v("oatpp"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),e._v("String beautifierNewLine "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(' "\n')])])]),t("h3",{attrs:{id:"serializer-config-config"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serializer-config-config"}},[e._v("#")]),e._v(" Serializer::Config::Config")]),e._v(" "),t("p",[e._v("Constructor.")]),e._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("Config")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("h3",{attrs:{id:"serializer-config-createshared"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serializer-config-createshared"}},[e._v("#")]),e._v(" Serializer::Config::createShared")]),e._v(" "),t("p",[e._v("Create shared config. "),t("ul",[t("li",[t("strong",[e._v("@return")]),e._v(" - "),t("code",[e._v("std::shared_ptr")]),e._v(" to Config. ")])])]),e._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("static")]),e._v(" std"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),e._v("shared_ptr"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("Config"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("createShared")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);