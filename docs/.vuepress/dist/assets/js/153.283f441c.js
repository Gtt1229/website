(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{525:function(t,e,a){"use strict";a.r(e);var s=a(42),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"memorypool-hpp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memorypool-hpp"}},[t._v("#")]),t._v(" MemoryPool.hpp"),a("seo")],1),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/oatpp/oatpp/blob/master/src/oatpp/core/base/memory/MemoryPool.hpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("This File On Github"),a("OutboundLink")],1),a("br"),t._v(" "),a("a",{attrs:{href:"https://github.com/oatpp/oatpp/issues/new?title=API%20question&body=In%20file:%20oatpp/core/base/memory/MemoryPool.hpp%0A%0A%23%20Question%0A%0A%3Cyour-question-here%3E",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ask A Question"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("code",[t._v("API: latest")]),a("br"),t._v(" "),a("code",[t._v("module: oatpp")]),a("br"),t._v(" "),a("code",[t._v('#include "oatpp/core/base/memory/MemoryPool.hpp"')])]),t._v(" "),a("h2",{attrs:{id:"memorypool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memorypool"}},[t._v("#")]),t._v(" MemoryPool")]),t._v(" "),a("p",[t._v("Memory Pool allocates memory chunks. Each chunk consists of specified number of fixed-size entries. Entries can be obtained and freed by user. When memory pool runs out of free entries, new chunk is allocated.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" base "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" memory "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MemoryPool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Return Type")]),t._v(" "),a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("[none]")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#memorypool-memorypool"}},[t._v("MemoryPool")])]),t._v(" "),a("td",[t._v("Multiple implementations: "),a("br"),a("ol",[a("li",[t._v("Constructor. ")]),a("li",[t._v("Deleted copy-constructor. ")])])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("[none]")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#memorypool-~memorypool"}},[t._v("~MemoryPool")])]),t._v(" "),a("td",[t._v("Virtual destructor.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("void*")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#memorypool-obtain"}},[t._v("obtain")])]),t._v(" "),a("td",[t._v("Obtain pointer to memory entry.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("void")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#memorypool-free"}},[t._v("free")])]),t._v(" "),a("td",[t._v("Free obtained earlier memory entry.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::string")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#memorypool-getname"}},[t._v("getName")])]),t._v(" "),a("td",[t._v("Get name of the memory pool.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("v_buff_size")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#memorypool-getentrysize"}},[t._v("getEntrySize")])]),t._v(" "),a("td",[t._v("Get size of the memory entry in bytes which can be obtained by call to "),a("a",{attrs:{href:"#memorypool-obtain"}},[t._v("MemoryPool::obtain()")]),t._v(".")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("v_buff_size")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#memorypool-getsize"}},[t._v("getSize")])]),t._v(" "),a("td",[t._v("Get size of the memory allocated by memory pool.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("v_int64")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#memorypool-getobjectscount"}},[t._v("getObjectsCount")])]),t._v(" "),a("td",[t._v("Get number of entries currently in use.")])])])]),t._v(" "),a("h3",{attrs:{id:"memorypool-memorypool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memorypool-memorypool"}},[t._v("#")]),t._v(" MemoryPool::MemoryPool")]),t._v(" "),a("ol",[a("li",[t._v("Constructor. "),a("ul",[a("li",[a("strong",[t._v("@param")]),t._v(" name - name of the pool. ")]),a("li",[a("strong",[t._v("@param")]),t._v(" entrySize - size of the entry in bytes returned in call to "),a("a",{attrs:{href:"#memorypool-obtain"}},[t._v("MemoryPool::obtain()")]),t._v(". ")]),a("li",[a("strong",[t._v("@param")]),t._v(" chunkSize - number of entries in one chunk. ")])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MemoryPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size entrySize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size chunkSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("Deleted copy-constructor."),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MemoryPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" MemoryPool"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"memorypool-memorypool-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memorypool-memorypool-2"}},[t._v("#")]),t._v(" MemoryPool::~MemoryPool")]),t._v(" "),a("p",[t._v("Virtual destructor.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MemoryPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"memorypool-obtain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memorypool-obtain"}},[t._v("#")]),t._v(" MemoryPool::obtain")]),t._v(" "),a("p",[t._v("Obtain pointer to memory entry. When entry is no more needed, user must call "),a("RouterLink",{attrs:{to:"/api/latest/oatpp/core/base/memory/MemoryPool/#memorypool-free"}},[t._v("oatpp::base::memory::MemoryPool::free()")]),t._v(" and pass obtained entry pointer as a parameter. "),a("ul",[a("li",[a("strong",[t._v("@return")]),t._v(" - pointer to memory entry. ")])])],1),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("obtain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"memorypool-free"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memorypool-free"}},[t._v("#")]),t._v(" MemoryPool::free")]),t._v(" "),a("p",[t._v('Free obtained earlier memory entry. This method is static, because entry "knows" to what pool it belongs. '),a("ul",[a("li",[a("strong",[t._v("@param")]),t._v(" entry - entry obtained by call to "),a("a",{attrs:{href:"#memorypool-obtain"}},[t._v("MemoryPool::obtain()")])])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"memorypool-getname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memorypool-getname"}},[t._v("#")]),t._v(" MemoryPool::getName")]),t._v(" "),a("p",[t._v("Get name of the memory pool. "),a("ul",[a("li",[a("strong",[t._v("@return")]),t._v(" - memory pool name as "),a("code",[t._v("std::string")]),t._v(". ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"memorypool-getentrysize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memorypool-getentrysize"}},[t._v("#")]),t._v(" MemoryPool::getEntrySize")]),t._v(" "),a("p",[t._v("Get size of the memory entry in bytes which can be obtained by call to "),a("a",{attrs:{href:"#memorypool-obtain"}},[t._v("MemoryPool::obtain()")]),t._v(". "),a("ul",[a("li",[a("strong",[t._v("@return")]),t._v(" - size of the enrty in bytes. ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("v_buff_size "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEntrySize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"memorypool-getsize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memorypool-getsize"}},[t._v("#")]),t._v(" MemoryPool::getSize")]),t._v(" "),a("p",[t._v("Get size of the memory allocated by memory pool. "),a("ul",[a("li",[a("strong",[t._v("@return")]),t._v(" - size of the memory allocated by memory pool. ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("v_buff_size "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"memorypool-getobjectscount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memorypool-getobjectscount"}},[t._v("#")]),t._v(" MemoryPool::getObjectsCount")]),t._v(" "),a("p",[t._v("Get number of entries currently in use. "),a("ul",[a("li",[a("strong",[t._v("@return")]),t._v(" - number of entries currently in use. ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("v_int64 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getObjectsCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"threaddistributedmemorypool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threaddistributedmemorypool"}},[t._v("#")]),t._v(" ThreadDistributedMemoryPool")]),t._v(" "),a("p",[t._v("Creates multiple MemoryPools ("),a("a",{attrs:{href:"#memorypool"}},[t._v("MemoryPool")]),t._v(") to reduce concurrency blocking in call to "),a("a",{attrs:{href:"#threaddistributedmemorypool-obtain"}},[t._v("ThreadDistributedMemoryPool::obtain()")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" base "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" memory "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadDistributedMemoryPool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"fields"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fields"}},[t._v("#")]),t._v(" Fields")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("const v_int64")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#threaddistributedmemorypool-shards-count-default"}},[t._v("SHARDS_COUNT_DEFAULT")])]),t._v(" "),a("td",[t._v("Default number of MemoryPools ("),a("a",{attrs:{href:"#memorypool"}},[t._v("MemoryPool")]),t._v(') "shards" to create.')])])])]),t._v(" "),a("h3",{attrs:{id:"methods-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods-2"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Return Type")]),t._v(" "),a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("[none]")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#threaddistributedmemorypool-threaddistributedmemorypool"}},[t._v("ThreadDistributedMemoryPool")])]),t._v(" "),a("td",[t._v("Multiple implementations: "),a("br"),a("ol",[a("li",[t._v("Constructor. ")]),a("li",[t._v("Deleted copy-constructor. ")])])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("void*")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#threaddistributedmemorypool-obtain"}},[t._v("obtain")])]),t._v(" "),a("td",[t._v("Obtain pointer to memory entry.")])])])]),t._v(" "),a("h3",{attrs:{id:"threaddistributedmemorypool-shards-count-default"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threaddistributedmemorypool-shards-count-default"}},[t._v("#")]),t._v(" ThreadDistributedMemoryPool::SHARDS_COUNT_DEFAULT")]),t._v(" "),a("p",[t._v("Default number of MemoryPools ("),a("a",{attrs:{href:"#memorypool"}},[t._v("MemoryPool")]),t._v(') "shards" to create.')]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" v_int64 SHARDS_COUNT_DEFAULT\n")])])]),a("h3",{attrs:{id:"threaddistributedmemorypool-threaddistributedmemorypool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threaddistributedmemorypool-threaddistributedmemorypool"}},[t._v("#")]),t._v(" ThreadDistributedMemoryPool::ThreadDistributedMemoryPool")]),t._v(" "),a("ol",[a("li",[t._v("Constructor. "),a("ul",[a("li",[a("strong",[t._v("@param")]),t._v(" name - name of the memory pool. ")]),a("li",[a("strong",[t._v("@param")]),t._v(" entrySize - size of memory pool entry. ")]),a("li",[a("strong",[t._v("@param")]),t._v(" chunkSize - number of entries in chunk. ")]),a("li",[a("strong",[t._v("@param")]),t._v(" shardsCount - number of MemoryPools ("),a("a",{attrs:{href:"#memorypool"}},[t._v("MemoryPool")]),t._v(') "shards" to create. ')])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ThreadDistributedMemoryPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size entrySize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_buff_size chunkSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                            v_int64 shardsCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SHARDS_COUNT_DEFAULT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("Deleted copy-constructor."),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ThreadDistributedMemoryPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ThreadDistributedMemoryPool"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"threaddistributedmemorypool-obtain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threaddistributedmemorypool-obtain"}},[t._v("#")]),t._v(" ThreadDistributedMemoryPool::obtain")]),t._v(" "),a("p",[t._v("Obtain pointer to memory entry. When entry is no more needed, user must call "),a("RouterLink",{attrs:{to:"/api/latest/oatpp/core/base/memory/MemoryPool/#memorypool-free"}},[t._v("oatpp::base::memory::MemoryPool::free()")]),t._v(" and pass obtained entry pointer as a parameter. "),a("ul",[a("li",[a("strong",[t._v("@return")]),t._v(" - pointer to memory entry. ")])])],1),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("obtain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"bench"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bench"}},[t._v("#")]),t._v(" Bench")]),t._v(" "),a("p",[t._v("Not thread-safe pool of objects of specified type. "),a("ul",[a("li",[a("strong",[t._v("@tparam")]),t._v(" T - object type. ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" oatpp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" base "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" memory "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bench")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"methods-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods-3"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Return Type")]),t._v(" "),a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("[none]")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#bench-bench"}},[t._v("Bench")])]),t._v(" "),a("td",[t._v("Constructor.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("[none]")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#bench-~bench"}},[t._v("~Bench")])]),t._v(" "),a("td",[t._v("Non virtual destructor.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("T*")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#bench-obtain"}},[t._v("obtain")])]),t._v(" "),a("td",[t._v("Construct object and get pointer to constructed object.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("void")])]),t._v(" "),a("td",[a("a",{attrs:{href:"#bench-free"}},[t._v("free")])]),t._v(" "),a("td",[t._v('Call object destructor and put it on "bench".')])])])]),t._v(" "),a("h3",{attrs:{id:"bench-bench"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bench-bench"}},[t._v("#")]),t._v(" Bench::Bench")]),t._v(" "),a("p",[t._v("Constructor. "),a("ul",[a("li",[a("strong",[t._v("@param")]),t._v(" growSize - number of objects to allocate when no free objects left. ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bench")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v_buff_size growSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("m_growSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("growSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("m_size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("m_indexPosition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("m_blocks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("m_index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"bench-bench-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bench-bench-2"}},[t._v("#")]),t._v(" Bench::~Bench")]),t._v(" "),a("p",[t._v("Non virtual destructor.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bench")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"bench-obtain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bench-obtain"}},[t._v("#")]),t._v(" Bench::obtain")]),t._v(" "),a("p",[t._v("Construct object and get pointer to constructed object. "),a("ul",[a("li",[a("strong",[t._v("@tparam")]),t._v(" Args - arguments to be passed to object constructor. ")]),a("li",[a("strong",[t._v("@param")]),t._v(" args - actual arguments to pass to object constructor. ")]),a("li",[a("strong",[t._v("@return")]),t._v(" - pointer to constructed object. ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" Args"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nT"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("obtain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"bench-free"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bench-free"}},[t._v("#")]),t._v(" Bench::free")]),t._v(" "),a("p",[t._v('Call object destructor and put it on "bench". '),a("ul",[a("li",[a("strong",[t._v("@param")]),t._v(" entry - object to be freed. ")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);